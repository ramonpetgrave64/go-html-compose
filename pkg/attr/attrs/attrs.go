// Code generated by "go run -C ../generate ./cmd/generate/"; DO NOT EDIT.
// HTML spec at https://html.spec.whatwg.org/multipage/indices.html

package attrs

import "go-html-compose/pkg/attr"

// Special attributes

// AriaProp
// Element(s): Global attribute.
// Description: Sets aria-* properties.
// Value: Text.
func AriaProp(property, value string) *attr.AttributeStruct {
	return attr.Attr("aria-" + property, value)
}

// DataProp
// Element(s): Global attribute.
// Description: Lets you attach custom attributes to an HTML element.
// Value: Text.
func DataProp(property, value string) *attr.AttributeStruct {
	return attr.Attr("data-" + property, value)
}

// Role
// Element(s): Global attribute.
// Description: Defines an explicit role for an element for use by assistive technologies.
// Value: Text.
func Role(value string) *attr.AttributeStruct {
	return attr.Attr("role", value)
}

// Regular Attributes

// Abbr 
// Element(s): th.
// Description: Alternative label to use for the header cell when referencing the cell in other contexts.
// Value: Text*.
func Abbr(value string) *attr.AttributeStruct {
	return attr.Attr("abbr", value)
}

// Accept 
// Element(s): input.
// Description: Hint for expected file type in file upload controls.
// Value: Set of comma-separated tokens* consisting of valid MIME type strings with no parameters or audio/*, video/*, or image/*.
func Accept(value string) *attr.AttributeStruct {
	return attr.Attr("accept", value)
}

// AcceptCharset 
// Element(s): form.
// Description: Character encodings to use for form submission.
// Value: ASCII case-insensitive match for "UTF-8".
func AcceptCharset(value string) *attr.AttributeStruct {
	return attr.Attr("accept-charset", value)
}

// Accesskey 
// Element(s): HTML elements.
// Description: Keyboard shortcut to activate or focus element.
// Value: Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length.
func Accesskey(value string) *attr.AttributeStruct {
	return attr.Attr("accesskey", value)
}

// Action 
// Element(s): form.
// Description: URL to use for form submission.
// Value: Valid non-empty URL potentially surrounded by spaces.
func Action(value string) *attr.AttributeStruct {
	return attr.Attr("action", value)
}

// Allow 
// Element(s): iframe.
// Description: Permissions policy to be applied to the iframe's contents.
// Value: Serialized permissions policy.
func Allow(value string) *attr.AttributeStruct {
	return attr.Attr("allow", value)
}

// Allowfullscreen 
// Element(s): iframe.
// Description: Whether to allow the iframe's contents to use requestFullscreen().
// Value: Boolean attribute.
func Allowfullscreen(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("allowfullscreen", value)
}

// Alpha 
// Element(s): input.
// Description: Allow the color's alpha component to be set.
// Value: Boolean attribute.
func Alpha(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("alpha", value)
}

// Alt 
// Element(s): area; img; input.
// Description: Replacement text for use when images are not available.
// Value: Text*.
func Alt(value string) *attr.AttributeStruct {
	return attr.Attr("alt", value)
}

// As 
// Element(s): link.
// Description: Potential destination for a preload request (for rel="preload" and rel="modulepreload").
// Value: Potential destination, for rel="preload"; script-like destination, for rel="modulepreload".
func As(value string) *attr.AttributeStruct {
	return attr.Attr("as", value)
}

// Async 
// Element(s): script.
// Description: Execute script when available, without blocking while fetching.
// Value: Boolean attribute.
func Async(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("async", value)
}

// Autocapitalize 
// Element(s): HTML elements.
// Description: Recommended autocapitalization behavior (for supported input methods).
// Value: "on"; "off"; "none"; "sentences"; "words"; "characters".
func Autocapitalize(value string) *attr.AttributeStruct {
	return attr.Attr("autocapitalize", value)
}

// Autocomplete 
// Element(s): form.
// Description: Default setting for autofill feature for controls in the form.
// Value: "on"; "off".
//
// Element(s): input; select; textarea.
// Description: Hint for form autofill feature.
// Value: Autofill field name and related tokens*.
func Autocomplete(value string) *attr.AttributeStruct {
	return attr.Attr("autocomplete", value)
}

// Autocorrect 
// Element(s): HTML elements.
// Description: Recommended autocorrection behavior (for supported input methods).
// Value: "on"; "off".
func Autocorrect(value string) *attr.AttributeStruct {
	return attr.Attr("autocorrect", value)
}

// Autofocus 
// Element(s): HTML elements.
// Description: Automatically focus the element when the page is loaded.
// Value: Boolean attribute.
func Autofocus(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("autofocus", value)
}

// Autoplay 
// Element(s): audio; video.
// Description: Hint that the media resource can be started automatically when the page is loaded.
// Value: Boolean attribute.
func Autoplay(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("autoplay", value)
}

// Blocking 
// Element(s): link; script; style.
// Description: Whether the element is potentially render-blocking.
// Value: Unordered set of unique space-separated tokens*.
func Blocking(value string) *attr.AttributeStruct {
	return attr.Attr("blocking", value)
}

// Charset 
// Element(s): meta.
// Description: Character encoding declaration.
// Value: "utf-8".
func Charset(value string) *attr.AttributeStruct {
	return attr.Attr("charset", value)
}

// Checked 
// Element(s): input.
// Description: Whether the control is checked.
// Value: Boolean attribute.
func Checked(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("checked", value)
}

// Cite 
// Element(s): blockquote; del; ins; q.
// Description: Link to the source of the quotation or more information about the edit.
// Value: Valid URL potentially surrounded by spaces.
func Cite(value string) *attr.AttributeStruct {
	return attr.Attr("cite", value)
}

// Class 
// Element(s): HTML elements.
// Description: Classes to which the element belongs.
// Value: Set of space-separated tokens.
func Class(value string) *attr.AttributeStruct {
	return attr.Attr("class", value)
}

// Closedby 
// Element(s): dialog.
// Description: Which user actions will close the dialog.
// Value: "any"; "closerequest"; "none";.
func Closedby(value string) *attr.AttributeStruct {
	return attr.Attr("closedby", value)
}

// Color 
// Element(s): link.
// Description: Color to use when customizing a site's icon (for rel="mask-icon").
// Value: CSS <color>.
func Color(value string) *attr.AttributeStruct {
	return attr.Attr("color", value)
}

// Colorspace 
// Element(s): input.
// Description: The color space of the serialized color.
// Value: "limited-srgb"; "display-p3".
func Colorspace(value string) *attr.AttributeStruct {
	return attr.Attr("colorspace", value)
}

// Cols 
// Element(s): textarea.
// Description: Maximum number of characters per line.
// Value: Valid non-negative integer greater than zero.
func Cols(value string) *attr.AttributeStruct {
	return attr.Attr("cols", value)
}

// Colspan 
// Element(s): td; th.
// Description: Number of columns that the cell is to span.
// Value: Valid non-negative integer greater than zero.
func Colspan(value string) *attr.AttributeStruct {
	return attr.Attr("colspan", value)
}

// Command 
// Element(s): button.
// Description: Indicates to the targeted element which action to take..
// Value: "toggle-popover"; "show-popover"; "hide-popover"; "close"; "show-modal"; a custom command keyword.
func Command(value string) *attr.AttributeStruct {
	return attr.Attr("command", value)
}

// Commandfor 
// Element(s): button.
// Description: Targets another element to be invoked..
// Value: ID*.
func Commandfor(value string) *attr.AttributeStruct {
	return attr.Attr("commandfor", value)
}

// Content 
// Element(s): meta.
// Description: Value of the element.
// Value: Text*.
func Content(value string) *attr.AttributeStruct {
	return attr.Attr("content", value)
}

// Contenteditable 
// Element(s): HTML elements.
// Description: Whether the element is editable.
// Value: "true"; "plaintext-only"; "false".
func Contenteditable(value string) *attr.AttributeStruct {
	return attr.Attr("contenteditable", value)
}

// Controls 
// Element(s): audio; video.
// Description: Show user agent controls.
// Value: Boolean attribute.
func Controls(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("controls", value)
}

// Coords 
// Element(s): area.
// Description: Coordinates for the shape to be created in an image map.
// Value: Valid list of floating-point numbers*.
func Coords(value string) *attr.AttributeStruct {
	return attr.Attr("coords", value)
}

// Crossorigin 
// Element(s): audio; img; link; script; video.
// Description: How the element handles crossorigin requests.
// Value: "anonymous"; "use-credentials".
func Crossorigin(value string) *attr.AttributeStruct {
	return attr.Attr("crossorigin", value)
}

// Data 
// Element(s): object.
// Description: Address of the resource.
// Value: Valid non-empty URL potentially surrounded by spaces.
func Data(value string) *attr.AttributeStruct {
	return attr.Attr("data", value)
}

// Datetime 
// Element(s): del; ins.
// Description: Date and (optionally) time of the change.
// Value: Valid date string with optional time.
//
// Element(s): time.
// Description: Machine-readable value.
// Value: Valid month string, valid date string, valid yearless date string, valid time string, valid local date and time string, valid time-zone offset string, valid global date and time string, valid week string, valid non-negative integer, or valid duration string.
func Datetime(value string) *attr.AttributeStruct {
	return attr.Attr("datetime", value)
}

// Decoding 
// Element(s): img.
// Description: Decoding hint to use when processing this image for presentation.
// Value: "sync"; "async"; "auto".
func Decoding(value string) *attr.AttributeStruct {
	return attr.Attr("decoding", value)
}

// Default 
// Element(s): track.
// Description: Enable the track if no other text track is more suitable.
// Value: Boolean attribute.
func Default(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("default", value)
}

// Defer 
// Element(s): script.
// Description: Defer script execution.
// Value: Boolean attribute.
func Defer(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("defer", value)
}

// Dir 
// Element(s): HTML elements.
// Description: The text directionality of the element.
// Value: "ltr"; "rtl"; "auto".
//
// Element(s): bdo.
// Description: The text directionality of the element.
// Value: "ltr"; "rtl".
func Dir(value string) *attr.AttributeStruct {
	return attr.Attr("dir", value)
}

// Dirname 
// Element(s): input; textarea.
// Description: Name of form control to use for sending the element's directionality in form submission.
// Value: Text*.
func Dirname(value string) *attr.AttributeStruct {
	return attr.Attr("dirname", value)
}

// Disabled 
// Element(s): button; input; optgroup; option; select; textarea; form-associated custom elements.
// Description: Whether the form control is disabled.
// Value: Boolean attribute.
//
// Element(s): fieldset.
// Description: Whether the descendant form controls, except any inside legend, are disabled.
// Value: Boolean attribute.
//
// Element(s): link.
// Description: Whether the link is disabled.
// Value: Boolean attribute.
func Disabled(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("disabled", value)
}

// Download 
// Element(s): a; area.
// Description: Whether to download the resource instead of navigating to it, and its filename if so.
// Value: Text.
func Download(value string) *attr.AttributeStruct {
	return attr.Attr("download", value)
}

// Draggable 
// Element(s): HTML elements.
// Description: Whether the element is draggable.
// Value: "true"; "false".
func Draggable(value string) *attr.AttributeStruct {
	return attr.Attr("draggable", value)
}

// Enctype 
// Element(s): form.
// Description: Entry list encoding type to use for form submission.
// Value: "application/x-www-form-urlencoded"; "multipart/form-data"; "text/plain".
func Enctype(value string) *attr.AttributeStruct {
	return attr.Attr("enctype", value)
}

// Enterkeyhint 
// Element(s): HTML elements.
// Description: Hint for selecting an enter key action.
// Value: "enter"; "done"; "go"; "next"; "previous"; "search"; "send".
func Enterkeyhint(value string) *attr.AttributeStruct {
	return attr.Attr("enterkeyhint", value)
}

// Fetchpriority 
// Element(s): img; link; script.
// Description: Sets the priority for fetches initiated by the element.
// Value: "auto"; "high"; "low".
func Fetchpriority(value string) *attr.AttributeStruct {
	return attr.Attr("fetchpriority", value)
}

// For 
// Element(s): label.
// Description: Associate the label with form control.
// Value: ID*.
//
// Element(s): output.
// Description: Specifies controls from which the output was calculated.
// Value: Unordered set of unique space-separated tokens consisting of IDs*.
func For(value string) *attr.AttributeStruct {
	return attr.Attr("for", value)
}

// Form 
// Element(s): button; fieldset; input; object; output; select; textarea; form-associated custom elements.
// Description: Associates the element with a form element.
// Value: ID*.
func Form(value string) *attr.AttributeStruct {
	return attr.Attr("form", value)
}

// Formaction 
// Element(s): button; input.
// Description: URL to use for form submission.
// Value: Valid non-empty URL potentially surrounded by spaces.
func Formaction(value string) *attr.AttributeStruct {
	return attr.Attr("formaction", value)
}

// Formenctype 
// Element(s): button; input.
// Description: Entry list encoding type to use for form submission.
// Value: "application/x-www-form-urlencoded"; "multipart/form-data"; "text/plain".
func Formenctype(value string) *attr.AttributeStruct {
	return attr.Attr("formenctype", value)
}

// Formmethod 
// Element(s): button; input.
// Description: Variant to use for form submission.
// Value: "GET"; "POST"; "dialog".
func Formmethod(value string) *attr.AttributeStruct {
	return attr.Attr("formmethod", value)
}

// Formnovalidate 
// Element(s): button; input.
// Description: Bypass form control validation for form submission.
// Value: Boolean attribute.
func Formnovalidate(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("formnovalidate", value)
}

// Formtarget 
// Element(s): button; input.
// Description: Navigable for form submission.
// Value: Valid navigable target name or keyword.
func Formtarget(value string) *attr.AttributeStruct {
	return attr.Attr("formtarget", value)
}

// Headers 
// Element(s): td; th.
// Description: The header cells for this cell.
// Value: Unordered set of unique space-separated tokens consisting of IDs*.
func Headers(value string) *attr.AttributeStruct {
	return attr.Attr("headers", value)
}

// Height 
// Element(s): canvas; embed; iframe; img; input; object; source (in picture); video.
// Description: Vertical dimension.
// Value: Valid non-negative integer.
func Height(value string) *attr.AttributeStruct {
	return attr.Attr("height", value)
}

// Hidden 
// Element(s): HTML elements.
// Description: Whether the element is relevant.
// Value: "until-found"; "hidden"; the empty string.
func Hidden(value string) *attr.AttributeStruct {
	return attr.Attr("hidden", value)
}

// High 
// Element(s): meter.
// Description: Low limit of high range.
// Value: Valid floating-point number*.
func High(value string) *attr.AttributeStruct {
	return attr.Attr("high", value)
}

// Href 
// Element(s): a; area.
// Description: Address of the hyperlink.
// Value: Valid URL potentially surrounded by spaces.
//
// Element(s): link.
// Description: Address of the hyperlink.
// Value: Valid non-empty URL potentially surrounded by spaces.
//
// Element(s): base.
// Description: Document base URL.
// Value: Valid URL potentially surrounded by spaces.
func Href(value string) *attr.AttributeStruct {
	return attr.Attr("href", value)
}

// Hreflang 
// Element(s): a; link.
// Description: Language of the linked resource.
// Value: Valid BCP 47 language tag.
func Hreflang(value string) *attr.AttributeStruct {
	return attr.Attr("hreflang", value)
}

// HttpEquiv 
// Element(s): meta.
// Description: Pragma directive.
// Value: "content-type"; "default-style"; "refresh"; "x-ua-compatible"; "content-security-policy".
func HttpEquiv(value string) *attr.AttributeStruct {
	return attr.Attr("http-equiv", value)
}

// Id 
// Element(s): HTML elements.
// Description: The element's ID.
// Value: Text*.
func Id(value string) *attr.AttributeStruct {
	return attr.Attr("id", value)
}

// Imagesizes 
// Element(s): link.
// Description: Image sizes for different page layouts (for rel="preload").
// Value: Valid source size list.
func Imagesizes(value string) *attr.AttributeStruct {
	return attr.Attr("imagesizes", value)
}

// Imagesrcset 
// Element(s): link.
// Description: Images to use in different situations, e.g., high-resolution displays, small monitors, etc. (for rel="preload").
// Value: Comma-separated list of image candidate strings.
func Imagesrcset(value string) *attr.AttributeStruct {
	return attr.Attr("imagesrcset", value)
}

// Inert 
// Element(s): HTML elements.
// Description: Whether the element is inert..
// Value: Boolean attribute.
func Inert(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("inert", value)
}

// Inputmode 
// Element(s): HTML elements.
// Description: Hint for selecting an input modality.
// Value: "none"; "text"; "tel"; "email"; "url"; "numeric"; "decimal"; "search".
func Inputmode(value string) *attr.AttributeStruct {
	return attr.Attr("inputmode", value)
}

// Integrity 
// Element(s): link; script.
// Description: Integrity metadata used in Subresource Integrity checks [SRI].
// Value: Text.
func Integrity(value string) *attr.AttributeStruct {
	return attr.Attr("integrity", value)
}

// Is 
// Element(s): HTML elements.
// Description: Creates a customized built-in element.
// Value: Valid custom element name of a defined customized built-in element.
func Is(value string) *attr.AttributeStruct {
	return attr.Attr("is", value)
}

// Ismap 
// Element(s): img.
// Description: Whether the image is a server-side image map.
// Value: Boolean attribute.
func Ismap(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("ismap", value)
}

// Itemid 
// Element(s): HTML elements.
// Description: Global identifier for a microdata item.
// Value: Valid URL potentially surrounded by spaces.
func Itemid(value string) *attr.AttributeStruct {
	return attr.Attr("itemid", value)
}

// Itemprop 
// Element(s): HTML elements.
// Description: Property names of a microdata item.
// Value: Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*.
func Itemprop(value string) *attr.AttributeStruct {
	return attr.Attr("itemprop", value)
}

// Itemref 
// Element(s): HTML elements.
// Description: Referenced elements.
// Value: Unordered set of unique space-separated tokens consisting of IDs*.
func Itemref(value string) *attr.AttributeStruct {
	return attr.Attr("itemref", value)
}

// Itemscope 
// Element(s): HTML elements.
// Description: Introduces a microdata item.
// Value: Boolean attribute.
func Itemscope(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("itemscope", value)
}

// Itemtype 
// Element(s): HTML elements.
// Description: Item types of a microdata item.
// Value: Unordered set of unique space-separated tokens consisting of valid absolute URLs*.
func Itemtype(value string) *attr.AttributeStruct {
	return attr.Attr("itemtype", value)
}

// Kind 
// Element(s): track.
// Description: The type of text track.
// Value: "subtitles"; "captions"; "descriptions"; "chapters"; "metadata".
func Kind(value string) *attr.AttributeStruct {
	return attr.Attr("kind", value)
}

// Label 
// Element(s): optgroup; option; track.
// Description: User-visible label.
// Value: Text.
func Label(value string) *attr.AttributeStruct {
	return attr.Attr("label", value)
}

// Lang 
// Element(s): HTML elements.
// Description: Language of the element.
// Value: Valid BCP 47 language tag or the empty string.
func Lang(value string) *attr.AttributeStruct {
	return attr.Attr("lang", value)
}

// List 
// Element(s): input.
// Description: List of autocomplete options.
// Value: ID*.
func List(value string) *attr.AttributeStruct {
	return attr.Attr("list", value)
}

// Loading 
// Element(s): iframe; img.
// Description: Used when determining loading deferral.
// Value: "lazy"; "eager".
func Loading(value string) *attr.AttributeStruct {
	return attr.Attr("loading", value)
}

// Loop 
// Element(s): audio; video.
// Description: Whether to loop the media resource.
// Value: Boolean attribute.
func Loop(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("loop", value)
}

// Low 
// Element(s): meter.
// Description: High limit of low range.
// Value: Valid floating-point number*.
func Low(value string) *attr.AttributeStruct {
	return attr.Attr("low", value)
}

// Max 
// Element(s): input.
// Description: Maximum value.
// Value: Varies*.
//
// Element(s): meter; progress.
// Description: Upper bound of range.
// Value: Valid floating-point number*.
func Max(value string) *attr.AttributeStruct {
	return attr.Attr("max", value)
}

// Maxlength 
// Element(s): input; textarea.
// Description: Maximum length of value.
// Value: Valid non-negative integer.
func Maxlength(value string) *attr.AttributeStruct {
	return attr.Attr("maxlength", value)
}

// Media 
// Element(s): link; meta; source; style.
// Description: Applicable media.
// Value: Valid media query list.
func Media(value string) *attr.AttributeStruct {
	return attr.Attr("media", value)
}

// Method 
// Element(s): form.
// Description: Variant to use for form submission.
// Value: "GET"; "POST"; "dialog".
func Method(value string) *attr.AttributeStruct {
	return attr.Attr("method", value)
}

// Min 
// Element(s): input.
// Description: Minimum value.
// Value: Varies*.
//
// Element(s): meter.
// Description: Lower bound of range.
// Value: Valid floating-point number*.
func Min(value string) *attr.AttributeStruct {
	return attr.Attr("min", value)
}

// Minlength 
// Element(s): input; textarea.
// Description: Minimum length of value.
// Value: Valid non-negative integer.
func Minlength(value string) *attr.AttributeStruct {
	return attr.Attr("minlength", value)
}

// Multiple 
// Element(s): input; select.
// Description: Whether to allow multiple values.
// Value: Boolean attribute.
func Multiple(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("multiple", value)
}

// Muted 
// Element(s): audio; video.
// Description: Whether to mute the media resource by default.
// Value: Boolean attribute.
func Muted(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("muted", value)
}

// Name 
// Element(s): button; fieldset; input; output; select; textarea; form-associated custom elements.
// Description: Name of the element to use for form submission and in the form.elements API.
// Value: Text*.
//
// Element(s): details.
// Description: Name of group of mutually-exclusive details elements.
// Value: Text*.
//
// Element(s): form.
// Description: Name of form to use in the document.forms API.
// Value: Text*.
//
// Element(s): iframe; object.
// Description: Name of content navigable.
// Value: Valid navigable target name or keyword.
//
// Element(s): map.
// Description: Name of image map to reference from the usemap attribute.
// Value: Text*.
//
// Element(s): meta.
// Description: Metadata name.
// Value: Text*.
//
// Element(s): slot.
// Description: Name of shadow tree slot.
// Value: Text.
func Name(value string) *attr.AttributeStruct {
	return attr.Attr("name", value)
}

// Nomodule 
// Element(s): script.
// Description: Prevents execution in user agents that support module scripts.
// Value: Boolean attribute.
func Nomodule(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("nomodule", value)
}

// Nonce 
// Element(s): HTML elements.
// Description: Cryptographic nonce used in Content Security Policy checks [CSP].
// Value: Text.
func Nonce(value string) *attr.AttributeStruct {
	return attr.Attr("nonce", value)
}

// Novalidate 
// Element(s): form.
// Description: Bypass form control validation for form submission.
// Value: Boolean attribute.
func Novalidate(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("novalidate", value)
}

// Open 
// Element(s): details.
// Description: Whether the details are visible.
// Value: Boolean attribute.
//
// Element(s): dialog.
// Description: Whether the dialog box is showing.
// Value: Boolean attribute.
func Open(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("open", value)
}

// Optimum 
// Element(s): meter.
// Description: Optimum value in gauge.
// Value: Valid floating-point number*.
func Optimum(value string) *attr.AttributeStruct {
	return attr.Attr("optimum", value)
}

// Pattern 
// Element(s): input.
// Description: Pattern to be matched by the form control's value.
// Value: Regular expression matching the JavaScript Pattern production.
func Pattern(value string) *attr.AttributeStruct {
	return attr.Attr("pattern", value)
}

// Ping 
// Element(s): a; area.
// Description: URLs to ping.
// Value: Set of space-separated tokens consisting of valid non-empty URLs.
func Ping(value string) *attr.AttributeStruct {
	return attr.Attr("ping", value)
}

// Placeholder 
// Element(s): input; textarea.
// Description: User-visible label to be placed within the form control.
// Value: Text*.
func Placeholder(value string) *attr.AttributeStruct {
	return attr.Attr("placeholder", value)
}

// Playsinline 
// Element(s): video.
// Description: Encourage the user agent to display video content within the element's playback area.
// Value: Boolean attribute.
func Playsinline(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("playsinline", value)
}

// Popover 
// Element(s): HTML elements.
// Description: Makes the element a popover element.
// Value: "auto"; "manual";.
func Popover(value string) *attr.AttributeStruct {
	return attr.Attr("popover", value)
}

// Popovertarget 
// Element(s): button; input.
// Description: Targets a popover element to toggle, show, or hide.
// Value: ID*.
func Popovertarget(value string) *attr.AttributeStruct {
	return attr.Attr("popovertarget", value)
}

// Popovertargetaction 
// Element(s): button; input.
// Description: Indicates whether a targeted popover element is to be toggled, shown, or hidden.
// Value: "toggle"; "show"; "hide".
func Popovertargetaction(value string) *attr.AttributeStruct {
	return attr.Attr("popovertargetaction", value)
}

// Poster 
// Element(s): video.
// Description: Poster frame to show prior to video playback.
// Value: Valid non-empty URL potentially surrounded by spaces.
func Poster(value string) *attr.AttributeStruct {
	return attr.Attr("poster", value)
}

// Preload 
// Element(s): audio; video.
// Description: Hints how much buffering the media resource will likely need.
// Value: "none"; "metadata"; "auto".
func Preload(value string) *attr.AttributeStruct {
	return attr.Attr("preload", value)
}

// Readonly 
// Element(s): input; textarea.
// Description: Whether to allow the value to be edited by the user.
// Value: Boolean attribute.
//
// Element(s): form-associated custom elements.
// Description: Affects willValidate, plus any behavior added by the custom element author.
// Value: Boolean attribute.
func Readonly(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("readonly", value)
}

// Referrerpolicy 
// Element(s): a; area; iframe; img; link; script.
// Description: Referrer policy for fetches initiated by the element.
// Value: Referrer policy.
func Referrerpolicy(value string) *attr.AttributeStruct {
	return attr.Attr("referrerpolicy", value)
}

// Rel 
// Element(s): a; area.
// Description: Relationship between the location in the document containing the hyperlink and the destination resource.
// Value: Unordered set of unique space-separated tokens*.
//
// Element(s): link.
// Description: Relationship between the document containing the hyperlink and the destination resource.
// Value: Unordered set of unique space-separated tokens*.
func Rel(value string) *attr.AttributeStruct {
	return attr.Attr("rel", value)
}

// Required 
// Element(s): input; select; textarea.
// Description: Whether the control is required for form submission.
// Value: Boolean attribute.
func Required(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("required", value)
}

// Reversed 
// Element(s): ol.
// Description: Number the list backwards.
// Value: Boolean attribute.
func Reversed(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("reversed", value)
}

// Rows 
// Element(s): textarea.
// Description: Number of lines to show.
// Value: Valid non-negative integer greater than zero.
func Rows(value string) *attr.AttributeStruct {
	return attr.Attr("rows", value)
}

// Rowspan 
// Element(s): td; th.
// Description: Number of rows that the cell is to span.
// Value: Valid non-negative integer.
func Rowspan(value string) *attr.AttributeStruct {
	return attr.Attr("rowspan", value)
}

// Sandbox 
// Element(s): iframe.
// Description: Security rules for nested content.
// Value: Unordered set of unique space-separated tokens, ASCII case-insensitive, consisting of "allow-downloads""allow-forms""allow-modals""allow-orientation-lock""allow-pointer-lock""allow-popups""allow-popups-to-escape-sandbox""allow-presentation""allow-same-origin""allow-scripts""allow-top-navigation""allow-top-navigation-by-user-activation""allow-top-navigation-to-custom-protocols".
func Sandbox(value string) *attr.AttributeStruct {
	return attr.Attr("sandbox", value)
}

// Scope 
// Element(s): th.
// Description: Specifies which cells the header cell applies to.
// Value: "row"; "col"; "rowgroup"; "colgroup".
func Scope(value string) *attr.AttributeStruct {
	return attr.Attr("scope", value)
}

// Selected 
// Element(s): option.
// Description: Whether the option is selected by default.
// Value: Boolean attribute.
func Selected(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("selected", value)
}

// Shadowrootclonable 
// Element(s): template.
// Description: Sets clonable on a declarative shadow root.
// Value: Boolean attribute.
func Shadowrootclonable(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("shadowrootclonable", value)
}

// Shadowrootdelegatesfocus 
// Element(s): template.
// Description: Sets delegates focus on a declarative shadow root.
// Value: Boolean attribute.
func Shadowrootdelegatesfocus(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("shadowrootdelegatesfocus", value)
}

// Shadowrootmode 
// Element(s): template.
// Description: Enables streaming declarative shadow roots.
// Value: "open"; "closed".
func Shadowrootmode(value string) *attr.AttributeStruct {
	return attr.Attr("shadowrootmode", value)
}

// Shadowrootserializable 
// Element(s): template.
// Description: Sets serializable on a declarative shadow root.
// Value: Boolean attribute.
func Shadowrootserializable(value bool) *attr.AttributeStruct {
	return attr.BooleanAttr("shadowrootserializable", value)
}

// Shape 
// Element(s): area.
// Description: The kind of shape to be created in an image map.
// Value: "circle"; "default"; "poly"; "rect".
func Shape(value string) *attr.AttributeStruct {
	return attr.Attr("shape", value)
}

// Size 
// Element(s): input; select.
// Description: Size of the control.
// Value: Valid non-negative integer greater than zero.
func Size(value string) *attr.AttributeStruct {
	return attr.Attr("size", value)
}

// Sizes 
// Element(s): link.
// Description: Sizes of the icons (for rel="icon").
// Value: Unordered set of unique space-separated tokens, ASCII case-insensitive, consisting of sizes*.
//
// Element(s): img; source.
// Description: Image sizes for different page layouts.
// Value: Valid source size list.
func Sizes(value string) *attr.AttributeStruct {
	return attr.Attr("sizes", value)
}

// Slot 
// Element(s): HTML elements.
// Description: The element's desired slot.
// Value: Text.
func Slot(value string) *attr.AttributeStruct {
	return attr.Attr("slot", value)
}

// Span 
// Element(s): col; colgroup.
// Description: Number of columns spanned by the element.
// Value: Valid non-negative integer greater than zero.
func Span(value string) *attr.AttributeStruct {
	return attr.Attr("span", value)
}

// Spellcheck 
// Element(s): HTML elements.
// Description: Whether the element is to have its spelling and grammar checked.
// Value: "true"; "false"; the empty string.
func Spellcheck(value string) *attr.AttributeStruct {
	return attr.Attr("spellcheck", value)
}

// Src 
// Element(s): audio; embed; iframe; img; input; script; source (in video or audio); track; video.
// Description: Address of the resource.
// Value: Valid non-empty URL potentially surrounded by spaces.
func Src(value string) *attr.AttributeStruct {
	return attr.Attr("src", value)
}

// Srcdoc 
// Element(s): iframe.
// Description: A document to render in the iframe.
// Value: The source of an iframe srcdoc document*.
func Srcdoc(value string) *attr.AttributeStruct {
	return attr.Attr("srcdoc", value)
}

// Srclang 
// Element(s): track.
// Description: Language of the text track.
// Value: Valid BCP 47 language tag.
func Srclang(value string) *attr.AttributeStruct {
	return attr.Attr("srclang", value)
}

// Srcset 
// Element(s): img; source.
// Description: Images to use in different situations, e.g., high-resolution displays, small monitors, etc..
// Value: Comma-separated list of image candidate strings.
func Srcset(value string) *attr.AttributeStruct {
	return attr.Attr("srcset", value)
}

// Start 
// Element(s): ol.
// Description: Starting value of the list.
// Value: Valid integer.
func Start(value string) *attr.AttributeStruct {
	return attr.Attr("start", value)
}

// Step 
// Element(s): input.
// Description: Granularity to be matched by the form control's value.
// Value: Valid floating-point number greater than zero, or "any".
func Step(value string) *attr.AttributeStruct {
	return attr.Attr("step", value)
}

// Style 
// Element(s): HTML elements.
// Description: Presentational and formatting instructions.
// Value: CSS declarations*.
func Style(value string) *attr.AttributeStruct {
	return attr.Attr("style", value)
}

// Tabindex 
// Element(s): HTML elements.
// Description: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation.
// Value: Valid integer.
func Tabindex(value string) *attr.AttributeStruct {
	return attr.Attr("tabindex", value)
}

// Target 
// Element(s): a; area.
// Description: Navigable for hyperlink navigation.
// Value: Valid navigable target name or keyword.
//
// Element(s): base.
// Description: Default navigable for hyperlink navigation and form submission.
// Value: Valid navigable target name or keyword.
//
// Element(s): form.
// Description: Navigable for form submission.
// Value: Valid navigable target name or keyword.
func Target(value string) *attr.AttributeStruct {
	return attr.Attr("target", value)
}

// Title 
// Element(s): HTML elements.
// Description: Advisory information for the element.
// Value: Text.
//
// Element(s): abbr; dfn.
// Description: Full term or expansion of abbreviation.
// Value: Text.
//
// Element(s): input.
// Description: Description of pattern (when used with pattern attribute).
// Value: Text.
//
// Element(s): link.
// Description: Title of the link.
// Value: Text.
//
// Element(s): link; style.
// Description: CSS style sheet set name.
// Value: Text.
func Title(value string) *attr.AttributeStruct {
	return attr.Attr("title", value)
}

// Translate 
// Element(s): HTML elements.
// Description: Whether the element is to be translated when the page is localized.
// Value: "yes"; "no".
func Translate(value string) *attr.AttributeStruct {
	return attr.Attr("translate", value)
}

// Type 
// Element(s): a; link.
// Description: Hint for the type of the referenced resource.
// Value: Valid MIME type string.
//
// Element(s): button.
// Description: Type of button.
// Value: "submit"; "reset"; "button".
//
// Element(s): embed; object; source.
// Description: Type of embedded resource.
// Value: Valid MIME type string.
//
// Element(s): input.
// Description: Type of form control.
// Value: input type keyword.
//
// Element(s): ol.
// Description: Kind of list marker.
// Value: "1"; "a"; "A"; "i"; "I".
//
// Element(s): script.
// Description: Type of script.
// Value: "module"; a valid MIME type string that is not a JavaScript MIME type essence match.
func Type(value string) *attr.AttributeStruct {
	return attr.Attr("type", value)
}

// Usemap 
// Element(s): img.
// Description: Name of image map to use.
// Value: Valid hash-name reference*.
func Usemap(value string) *attr.AttributeStruct {
	return attr.Attr("usemap", value)
}

// Value 
// Element(s): button; option.
// Description: Value to be used for form submission.
// Value: Text.
//
// Element(s): data.
// Description: Machine-readable value.
// Value: Text*.
//
// Element(s): input.
// Description: Value of the form control.
// Value: Varies*.
//
// Element(s): li.
// Description: Ordinal value of the list item.
// Value: Valid integer.
//
// Element(s): meter; progress.
// Description: Current value of the element.
// Value: Valid floating-point number.
func Value(value string) *attr.AttributeStruct {
	return attr.Attr("value", value)
}

// Width 
// Element(s): canvas; embed; iframe; img; input; object; source (in picture); video.
// Description: Horizontal dimension.
// Value: Valid non-negative integer.
func Width(value string) *attr.AttributeStruct {
	return attr.Attr("width", value)
}

// Wrap 
// Element(s): textarea.
// Description: How the value of the form control is to be wrapped for form submission.
// Value: "soft"; "hard".
func Wrap(value string) *attr.AttributeStruct {
	return attr.Attr("wrap", value)
}

// Writingsuggestions 
// Element(s): HTML elements.
// Description: Whether the element can offer writing suggestions or not..
// Value: "true"; "false"; the empty string.
func Writingsuggestions(value string) *attr.AttributeStruct {
	return attr.Attr("writingsuggestions", value)
}


// Event Handler Attributes

// Onafterprint 
// Element(s): body.
// Description: afterprint event handler for Window object.
// Value: Event handler content attribute.
func Onafterprint(value string) *attr.AttributeStruct {
	return attr.RawAttr("onafterprint", value)
}

// Onauxclick 
// Element(s): HTML elements.
// Description: auxclick event handler.
// Value: Event handler content attribute.
func Onauxclick(value string) *attr.AttributeStruct {
	return attr.RawAttr("onauxclick", value)
}

// Onbeforeinput 
// Element(s): HTML elements.
// Description: beforeinput event handler.
// Value: Event handler content attribute.
func Onbeforeinput(value string) *attr.AttributeStruct {
	return attr.RawAttr("onbeforeinput", value)
}

// Onbeforematch 
// Element(s): HTML elements.
// Description: beforematch event handler.
// Value: Event handler content attribute.
func Onbeforematch(value string) *attr.AttributeStruct {
	return attr.RawAttr("onbeforematch", value)
}

// Onbeforeprint 
// Element(s): body.
// Description: beforeprint event handler for Window object.
// Value: Event handler content attribute.
func Onbeforeprint(value string) *attr.AttributeStruct {
	return attr.RawAttr("onbeforeprint", value)
}

// Onbeforeunload 
// Element(s): body.
// Description: beforeunload event handler for Window object.
// Value: Event handler content attribute.
func Onbeforeunload(value string) *attr.AttributeStruct {
	return attr.RawAttr("onbeforeunload", value)
}

// Onbeforetoggle 
// Element(s): HTML elements.
// Description: beforetoggle event handler.
// Value: Event handler content attribute.
func Onbeforetoggle(value string) *attr.AttributeStruct {
	return attr.RawAttr("onbeforetoggle", value)
}

// Onblur 
// Element(s): HTML elements.
// Description: blur event handler.
// Value: Event handler content attribute.
func Onblur(value string) *attr.AttributeStruct {
	return attr.RawAttr("onblur", value)
}

// Oncancel 
// Element(s): HTML elements.
// Description: cancel event handler.
// Value: Event handler content attribute.
func Oncancel(value string) *attr.AttributeStruct {
	return attr.RawAttr("oncancel", value)
}

// Oncanplay 
// Element(s): HTML elements.
// Description: canplay event handler.
// Value: Event handler content attribute.
func Oncanplay(value string) *attr.AttributeStruct {
	return attr.RawAttr("oncanplay", value)
}

// Oncanplaythrough 
// Element(s): HTML elements.
// Description: canplaythrough event handler.
// Value: Event handler content attribute.
func Oncanplaythrough(value string) *attr.AttributeStruct {
	return attr.RawAttr("oncanplaythrough", value)
}

// Onchange 
// Element(s): HTML elements.
// Description: change event handler.
// Value: Event handler content attribute.
func Onchange(value string) *attr.AttributeStruct {
	return attr.RawAttr("onchange", value)
}

// Onclick 
// Element(s): HTML elements.
// Description: click event handler.
// Value: Event handler content attribute.
func Onclick(value string) *attr.AttributeStruct {
	return attr.RawAttr("onclick", value)
}

// Onclose 
// Element(s): HTML elements.
// Description: close event handler.
// Value: Event handler content attribute.
func Onclose(value string) *attr.AttributeStruct {
	return attr.RawAttr("onclose", value)
}

// Oncommand 
// Element(s): HTML elements.
// Description: command event handler.
// Value: Event handler content attribute.
func Oncommand(value string) *attr.AttributeStruct {
	return attr.RawAttr("oncommand", value)
}

// Oncontextlost 
// Element(s): HTML elements.
// Description: contextlost event handler.
// Value: Event handler content attribute.
func Oncontextlost(value string) *attr.AttributeStruct {
	return attr.RawAttr("oncontextlost", value)
}

// Oncontextmenu 
// Element(s): HTML elements.
// Description: contextmenu event handler.
// Value: Event handler content attribute.
func Oncontextmenu(value string) *attr.AttributeStruct {
	return attr.RawAttr("oncontextmenu", value)
}

// Oncontextrestored 
// Element(s): HTML elements.
// Description: contextrestored event handler.
// Value: Event handler content attribute.
func Oncontextrestored(value string) *attr.AttributeStruct {
	return attr.RawAttr("oncontextrestored", value)
}

// Oncopy 
// Element(s): HTML elements.
// Description: copy event handler.
// Value: Event handler content attribute.
func Oncopy(value string) *attr.AttributeStruct {
	return attr.RawAttr("oncopy", value)
}

// Oncuechange 
// Element(s): HTML elements.
// Description: cuechange event handler.
// Value: Event handler content attribute.
func Oncuechange(value string) *attr.AttributeStruct {
	return attr.RawAttr("oncuechange", value)
}

// Oncut 
// Element(s): HTML elements.
// Description: cut event handler.
// Value: Event handler content attribute.
func Oncut(value string) *attr.AttributeStruct {
	return attr.RawAttr("oncut", value)
}

// Ondblclick 
// Element(s): HTML elements.
// Description: dblclick event handler.
// Value: Event handler content attribute.
func Ondblclick(value string) *attr.AttributeStruct {
	return attr.RawAttr("ondblclick", value)
}

// Ondrag 
// Element(s): HTML elements.
// Description: drag event handler.
// Value: Event handler content attribute.
func Ondrag(value string) *attr.AttributeStruct {
	return attr.RawAttr("ondrag", value)
}

// Ondragend 
// Element(s): HTML elements.
// Description: dragend event handler.
// Value: Event handler content attribute.
func Ondragend(value string) *attr.AttributeStruct {
	return attr.RawAttr("ondragend", value)
}

// Ondragenter 
// Element(s): HTML elements.
// Description: dragenter event handler.
// Value: Event handler content attribute.
func Ondragenter(value string) *attr.AttributeStruct {
	return attr.RawAttr("ondragenter", value)
}

// Ondragleave 
// Element(s): HTML elements.
// Description: dragleave event handler.
// Value: Event handler content attribute.
func Ondragleave(value string) *attr.AttributeStruct {
	return attr.RawAttr("ondragleave", value)
}

// Ondragover 
// Element(s): HTML elements.
// Description: dragover event handler.
// Value: Event handler content attribute.
func Ondragover(value string) *attr.AttributeStruct {
	return attr.RawAttr("ondragover", value)
}

// Ondragstart 
// Element(s): HTML elements.
// Description: dragstart event handler.
// Value: Event handler content attribute.
func Ondragstart(value string) *attr.AttributeStruct {
	return attr.RawAttr("ondragstart", value)
}

// Ondrop 
// Element(s): HTML elements.
// Description: drop event handler.
// Value: Event handler content attribute.
func Ondrop(value string) *attr.AttributeStruct {
	return attr.RawAttr("ondrop", value)
}

// Ondurationchange 
// Element(s): HTML elements.
// Description: durationchange event handler.
// Value: Event handler content attribute.
func Ondurationchange(value string) *attr.AttributeStruct {
	return attr.RawAttr("ondurationchange", value)
}

// Onemptied 
// Element(s): HTML elements.
// Description: emptied event handler.
// Value: Event handler content attribute.
func Onemptied(value string) *attr.AttributeStruct {
	return attr.RawAttr("onemptied", value)
}

// Onended 
// Element(s): HTML elements.
// Description: ended event handler.
// Value: Event handler content attribute.
func Onended(value string) *attr.AttributeStruct {
	return attr.RawAttr("onended", value)
}

// Onerror 
// Element(s): HTML elements.
// Description: error event handler.
// Value: Event handler content attribute.
func Onerror(value string) *attr.AttributeStruct {
	return attr.RawAttr("onerror", value)
}

// Onfocus 
// Element(s): HTML elements.
// Description: focus event handler.
// Value: Event handler content attribute.
func Onfocus(value string) *attr.AttributeStruct {
	return attr.RawAttr("onfocus", value)
}

// Onformdata 
// Element(s): HTML elements.
// Description: formdata event handler.
// Value: Event handler content attribute.
func Onformdata(value string) *attr.AttributeStruct {
	return attr.RawAttr("onformdata", value)
}

// Onhashchange 
// Element(s): body.
// Description: hashchange event handler for Window object.
// Value: Event handler content attribute.
func Onhashchange(value string) *attr.AttributeStruct {
	return attr.RawAttr("onhashchange", value)
}

// Oninput 
// Element(s): HTML elements.
// Description: input event handler.
// Value: Event handler content attribute.
func Oninput(value string) *attr.AttributeStruct {
	return attr.RawAttr("oninput", value)
}

// Oninvalid 
// Element(s): HTML elements.
// Description: invalid event handler.
// Value: Event handler content attribute.
func Oninvalid(value string) *attr.AttributeStruct {
	return attr.RawAttr("oninvalid", value)
}

// Onkeydown 
// Element(s): HTML elements.
// Description: keydown event handler.
// Value: Event handler content attribute.
func Onkeydown(value string) *attr.AttributeStruct {
	return attr.RawAttr("onkeydown", value)
}

// Onkeypress 
// Element(s): HTML elements.
// Description: keypress event handler.
// Value: Event handler content attribute.
func Onkeypress(value string) *attr.AttributeStruct {
	return attr.RawAttr("onkeypress", value)
}

// Onkeyup 
// Element(s): HTML elements.
// Description: keyup event handler.
// Value: Event handler content attribute.
func Onkeyup(value string) *attr.AttributeStruct {
	return attr.RawAttr("onkeyup", value)
}

// Onlanguagechange 
// Element(s): body.
// Description: languagechange event handler for Window object.
// Value: Event handler content attribute.
func Onlanguagechange(value string) *attr.AttributeStruct {
	return attr.RawAttr("onlanguagechange", value)
}

// Onload 
// Element(s): HTML elements.
// Description: load event handler.
// Value: Event handler content attribute.
func Onload(value string) *attr.AttributeStruct {
	return attr.RawAttr("onload", value)
}

// Onloadeddata 
// Element(s): HTML elements.
// Description: loadeddata event handler.
// Value: Event handler content attribute.
func Onloadeddata(value string) *attr.AttributeStruct {
	return attr.RawAttr("onloadeddata", value)
}

// Onloadedmetadata 
// Element(s): HTML elements.
// Description: loadedmetadata event handler.
// Value: Event handler content attribute.
func Onloadedmetadata(value string) *attr.AttributeStruct {
	return attr.RawAttr("onloadedmetadata", value)
}

// Onloadstart 
// Element(s): HTML elements.
// Description: loadstart event handler.
// Value: Event handler content attribute.
func Onloadstart(value string) *attr.AttributeStruct {
	return attr.RawAttr("onloadstart", value)
}

// Onmessage 
// Element(s): body.
// Description: message event handler for Window object.
// Value: Event handler content attribute.
func Onmessage(value string) *attr.AttributeStruct {
	return attr.RawAttr("onmessage", value)
}

// Onmessageerror 
// Element(s): body.
// Description: messageerror event handler for Window object.
// Value: Event handler content attribute.
func Onmessageerror(value string) *attr.AttributeStruct {
	return attr.RawAttr("onmessageerror", value)
}

// Onmousedown 
// Element(s): HTML elements.
// Description: mousedown event handler.
// Value: Event handler content attribute.
func Onmousedown(value string) *attr.AttributeStruct {
	return attr.RawAttr("onmousedown", value)
}

// Onmouseenter 
// Element(s): HTML elements.
// Description: mouseenter event handler.
// Value: Event handler content attribute.
func Onmouseenter(value string) *attr.AttributeStruct {
	return attr.RawAttr("onmouseenter", value)
}

// Onmouseleave 
// Element(s): HTML elements.
// Description: mouseleave event handler.
// Value: Event handler content attribute.
func Onmouseleave(value string) *attr.AttributeStruct {
	return attr.RawAttr("onmouseleave", value)
}

// Onmousemove 
// Element(s): HTML elements.
// Description: mousemove event handler.
// Value: Event handler content attribute.
func Onmousemove(value string) *attr.AttributeStruct {
	return attr.RawAttr("onmousemove", value)
}

// Onmouseout 
// Element(s): HTML elements.
// Description: mouseout event handler.
// Value: Event handler content attribute.
func Onmouseout(value string) *attr.AttributeStruct {
	return attr.RawAttr("onmouseout", value)
}

// Onmouseover 
// Element(s): HTML elements.
// Description: mouseover event handler.
// Value: Event handler content attribute.
func Onmouseover(value string) *attr.AttributeStruct {
	return attr.RawAttr("onmouseover", value)
}

// Onmouseup 
// Element(s): HTML elements.
// Description: mouseup event handler.
// Value: Event handler content attribute.
func Onmouseup(value string) *attr.AttributeStruct {
	return attr.RawAttr("onmouseup", value)
}

// Onoffline 
// Element(s): body.
// Description: offline event handler for Window object.
// Value: Event handler content attribute.
func Onoffline(value string) *attr.AttributeStruct {
	return attr.RawAttr("onoffline", value)
}

// Ononline 
// Element(s): body.
// Description: online event handler for Window object.
// Value: Event handler content attribute.
func Ononline(value string) *attr.AttributeStruct {
	return attr.RawAttr("ononline", value)
}

// Onpagehide 
// Element(s): body.
// Description: pagehide event handler for Window object.
// Value: Event handler content attribute.
func Onpagehide(value string) *attr.AttributeStruct {
	return attr.RawAttr("onpagehide", value)
}

// Onpagereveal 
// Element(s): body.
// Description: pagereveal event handler for Window object.
// Value: Event handler content attribute.
func Onpagereveal(value string) *attr.AttributeStruct {
	return attr.RawAttr("onpagereveal", value)
}

// Onpageshow 
// Element(s): body.
// Description: pageshow event handler for Window object.
// Value: Event handler content attribute.
func Onpageshow(value string) *attr.AttributeStruct {
	return attr.RawAttr("onpageshow", value)
}

// Onpageswap 
// Element(s): body.
// Description: pageswap event handler for Window object.
// Value: Event handler content attribute.
func Onpageswap(value string) *attr.AttributeStruct {
	return attr.RawAttr("onpageswap", value)
}

// Onpaste 
// Element(s): HTML elements.
// Description: paste event handler.
// Value: Event handler content attribute.
func Onpaste(value string) *attr.AttributeStruct {
	return attr.RawAttr("onpaste", value)
}

// Onpause 
// Element(s): HTML elements.
// Description: pause event handler.
// Value: Event handler content attribute.
func Onpause(value string) *attr.AttributeStruct {
	return attr.RawAttr("onpause", value)
}

// Onplay 
// Element(s): HTML elements.
// Description: play event handler.
// Value: Event handler content attribute.
func Onplay(value string) *attr.AttributeStruct {
	return attr.RawAttr("onplay", value)
}

// Onplaying 
// Element(s): HTML elements.
// Description: playing event handler.
// Value: Event handler content attribute.
func Onplaying(value string) *attr.AttributeStruct {
	return attr.RawAttr("onplaying", value)
}

// Onpopstate 
// Element(s): body.
// Description: popstate event handler for Window object.
// Value: Event handler content attribute.
func Onpopstate(value string) *attr.AttributeStruct {
	return attr.RawAttr("onpopstate", value)
}

// Onprogress 
// Element(s): HTML elements.
// Description: progress event handler.
// Value: Event handler content attribute.
func Onprogress(value string) *attr.AttributeStruct {
	return attr.RawAttr("onprogress", value)
}

// Onratechange 
// Element(s): HTML elements.
// Description: ratechange event handler.
// Value: Event handler content attribute.
func Onratechange(value string) *attr.AttributeStruct {
	return attr.RawAttr("onratechange", value)
}

// Onreset 
// Element(s): HTML elements.
// Description: reset event handler.
// Value: Event handler content attribute.
func Onreset(value string) *attr.AttributeStruct {
	return attr.RawAttr("onreset", value)
}

// Onresize 
// Element(s): HTML elements.
// Description: resize event handler.
// Value: Event handler content attribute.
func Onresize(value string) *attr.AttributeStruct {
	return attr.RawAttr("onresize", value)
}

// Onrejectionhandled 
// Element(s): body.
// Description: rejectionhandled event handler for Window object.
// Value: Event handler content attribute.
func Onrejectionhandled(value string) *attr.AttributeStruct {
	return attr.RawAttr("onrejectionhandled", value)
}

// Onscroll 
// Element(s): HTML elements.
// Description: scroll event handler.
// Value: Event handler content attribute.
func Onscroll(value string) *attr.AttributeStruct {
	return attr.RawAttr("onscroll", value)
}

// Onscrollend 
// Element(s): HTML elements.
// Description: scrollend event handler.
// Value: Event handler content attribute.
func Onscrollend(value string) *attr.AttributeStruct {
	return attr.RawAttr("onscrollend", value)
}

// Onsecuritypolicyviolation 
// Element(s): HTML elements.
// Description: securitypolicyviolation event handler.
// Value: Event handler content attribute.
func Onsecuritypolicyviolation(value string) *attr.AttributeStruct {
	return attr.RawAttr("onsecuritypolicyviolation", value)
}

// Onseeked 
// Element(s): HTML elements.
// Description: seeked event handler.
// Value: Event handler content attribute.
func Onseeked(value string) *attr.AttributeStruct {
	return attr.RawAttr("onseeked", value)
}

// Onseeking 
// Element(s): HTML elements.
// Description: seeking event handler.
// Value: Event handler content attribute.
func Onseeking(value string) *attr.AttributeStruct {
	return attr.RawAttr("onseeking", value)
}

// Onselect 
// Element(s): HTML elements.
// Description: select event handler.
// Value: Event handler content attribute.
func Onselect(value string) *attr.AttributeStruct {
	return attr.RawAttr("onselect", value)
}

// Onslotchange 
// Element(s): HTML elements.
// Description: slotchange event handler.
// Value: Event handler content attribute.
func Onslotchange(value string) *attr.AttributeStruct {
	return attr.RawAttr("onslotchange", value)
}

// Onstalled 
// Element(s): HTML elements.
// Description: stalled event handler.
// Value: Event handler content attribute.
func Onstalled(value string) *attr.AttributeStruct {
	return attr.RawAttr("onstalled", value)
}

// Onstorage 
// Element(s): body.
// Description: storage event handler for Window object.
// Value: Event handler content attribute.
func Onstorage(value string) *attr.AttributeStruct {
	return attr.RawAttr("onstorage", value)
}

// Onsubmit 
// Element(s): HTML elements.
// Description: submit event handler.
// Value: Event handler content attribute.
func Onsubmit(value string) *attr.AttributeStruct {
	return attr.RawAttr("onsubmit", value)
}

// Onsuspend 
// Element(s): HTML elements.
// Description: suspend event handler.
// Value: Event handler content attribute.
func Onsuspend(value string) *attr.AttributeStruct {
	return attr.RawAttr("onsuspend", value)
}

// Ontimeupdate 
// Element(s): HTML elements.
// Description: timeupdate event handler.
// Value: Event handler content attribute.
func Ontimeupdate(value string) *attr.AttributeStruct {
	return attr.RawAttr("ontimeupdate", value)
}

// Ontoggle 
// Element(s): HTML elements.
// Description: toggle event handler.
// Value: Event handler content attribute.
func Ontoggle(value string) *attr.AttributeStruct {
	return attr.RawAttr("ontoggle", value)
}

// Onunhandledrejection 
// Element(s): body.
// Description: unhandledrejection event handler for Window object.
// Value: Event handler content attribute.
func Onunhandledrejection(value string) *attr.AttributeStruct {
	return attr.RawAttr("onunhandledrejection", value)
}

// Onunload 
// Element(s): body.
// Description: unload event handler for Window object.
// Value: Event handler content attribute.
func Onunload(value string) *attr.AttributeStruct {
	return attr.RawAttr("onunload", value)
}

// Onvolumechange 
// Element(s): HTML elements.
// Description: volumechange event handler.
// Value: Event handler content attribute.
func Onvolumechange(value string) *attr.AttributeStruct {
	return attr.RawAttr("onvolumechange", value)
}

// Onwaiting 
// Element(s): HTML elements.
// Description: waiting event handler.
// Value: Event handler content attribute.
func Onwaiting(value string) *attr.AttributeStruct {
	return attr.RawAttr("onwaiting", value)
}

// Onwheel 
// Element(s): HTML elements.
// Description: wheel event handler.
// Value: Event handler content attribute.
func Onwheel(value string) *attr.AttributeStruct {
	return attr.RawAttr("onwheel", value)
}
