// Code generated by "go run -C ../../generate ./"; DO NOT EDIT.
// HTML spec at https://html.spec.whatwg.org/multipage/indices.html

package attrs

import (
	"github.com/ramonpetgrave64/go-html-compose/pkg/html/attrs"
	"github.com/ramonpetgrave64/go-html-compose/pkg/html/strict/attrs/internal/types"
	"github.com/ramonpetgrave64/go-html-compose/pkg/html/strict/elems"
)

// Abbr
//
// Element(s): th.
//
// Description: Alternative label to use for the header cell when referencing the cell in other contexts.
//
// Value: Text*.
func Abbr(value string) interface {
	elems.ThAttribute
} {
	return newAttrWrapper(attrs.Abbr(value))
}

// Accept
//
// Element(s): input.
//
// Description: Hint for expected file type in file upload controls.
//
// Value: Set of comma-separated tokens* consisting of valid MIME type strings with no parameters or audio/*, video/*, or image/*.
func Accept(value string) interface {
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Accept(value))
}

// AcceptCharset
//
// Element(s): form.
//
// Description: Character encodings to use for form submission.
//
// Value: ASCII case-insensitive match for "UTF-8".
func AcceptCharset(value string) interface {
	elems.FormAttribute
} {
	return newAttrWrapper(attrs.AcceptCharset(value))
}

// Accesskey
//
// Element(s): HTML elements.
//
// Description: Keyboard shortcut to activate or focus element.
//
// Value: Ordered set of unique space-separated tokens, none of which are identical to another, each consisting of one code point in length.
func Accesskey(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Accesskey(value))
}

// Action
//
// Element(s): form.
//
// Description: URL to use for form submission.
//
// Value: Valid non-empty URL potentially surrounded by spaces.
func Action(value string) interface {
	elems.FormAttribute
} {
	return newAttrWrapper(attrs.Action(value))
}

// Allow
//
// Element(s): iframe.
//
// Description: Permissions policy to be applied to the iframe's contents.
//
// Value: Serialized permissions policy.
func Allow(value string) interface {
	elems.IframeAttribute
} {
	return newAttrWrapper(attrs.Allow(value))
}

// Allowfullscreen
//
// Element(s): iframe.
//
// Description: Whether to allow the iframe's contents to use requestFullscreen().
//
// Value: Boolean attribute.
func Allowfullscreen(value bool) interface {
	elems.IframeAttribute
} {
	return newAttrWrapper(attrs.Allowfullscreen(value))
}

// Alpha
//
// Element(s): input.
//
// Description: Allow the color's alpha component to be set.
//
// Value: Boolean attribute.
func Alpha(value bool) interface {
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Alpha(value))
}

// Alt
//
// Element(s): area; img; input.
//
// Description: Replacement text for use when images are not available.
//
// Value: Text*.
func Alt(value string) interface {
	elems.AreaAttribute
	elems.ImgAttribute
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Alt(value))
}

// As
//
// Element(s): link.
//
// Description: Potential destination for a preload request (for rel="preload" and rel="modulepreload").
//
// Value: Potential destination, for rel="preload"; script-like destination, for rel="modulepreload".
func As(value string) interface {
	elems.LinkAttribute
} {
	return newAttrWrapper(attrs.As(value))
}

// Async
//
// Element(s): script.
//
// Description: Execute script when available, without blocking while fetching.
//
// Value: Boolean attribute.
func Async(value bool) interface {
	elems.ScriptAttribute
} {
	return newAttrWrapper(attrs.Async(value))
}

// Autocapitalize
//
// Element(s): HTML elements.
//
// Description: Recommended autocapitalization behavior (for supported input methods).
//
// Value: "on"; "off"; "none"; "sentences"; "words"; "characters".
func Autocapitalize(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Autocapitalize(value))
}

// Autocomplete
//
// Element(s): form.
//
// Description: Default setting for autofill feature for controls in the form.
//
// Value: "on"; "off".
//
// Element(s): input; select; textarea.
//
// Description: Hint for form autofill feature.
//
// Value: Autofill field name and related tokens*.
func Autocomplete(value string) interface {
	elems.FormAttribute
	elems.InputAttribute
	elems.SelectAttribute
	elems.TextareaAttribute
} {
	return newAttrWrapper(attrs.Autocomplete(value))
}

// Autocorrect
//
// Element(s): HTML elements.
//
// Description: Recommended autocorrection behavior (for supported input methods).
//
// Value: "on"; "off".
func Autocorrect(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Autocorrect(value))
}

// Autofocus
//
// Element(s): HTML elements.
//
// Description: Automatically focus the element when the page is loaded.
//
// Value: Boolean attribute.
func Autofocus(value bool) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Autofocus(value))
}

// Autoplay
//
// Element(s): audio; video.
//
// Description: Hint that the media resource can be started automatically when the page is loaded.
//
// Value: Boolean attribute.
func Autoplay(value bool) interface {
	elems.AudioAttribute
	elems.VideoAttribute
} {
	return newAttrWrapper(attrs.Autoplay(value))
}

// Blocking
//
// Element(s): link; script; style.
//
// Description: Whether the element is potentially render-blocking.
//
// Value: Unordered set of unique space-separated tokens*.
func Blocking(value string) interface {
	elems.LinkAttribute
	elems.ScriptAttribute
	elems.StyleAttribute
} {
	return newAttrWrapper(attrs.Blocking(value))
}

// Charset
//
// Element(s): meta.
//
// Description: Character encoding declaration.
//
// Value: "utf-8".
func Charset(value string) interface {
	elems.MetaAttribute
} {
	return newAttrWrapper(attrs.Charset(value))
}

// Checked
//
// Element(s): input.
//
// Description: Whether the control is checked.
//
// Value: Boolean attribute.
func Checked(value bool) interface {
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Checked(value))
}

// Cite
//
// Element(s): blockquote; del; ins; q.
//
// Description: Link to the source of the quotation or more information about the edit.
//
// Value: Valid URL potentially surrounded by spaces.
func Cite(value string) interface {
	elems.BlockquoteAttribute
	elems.DelAttribute
	elems.InsAttribute
	elems.QAttribute
} {
	return newAttrWrapper(attrs.Cite(value))
}

// Class
//
// Element(s): HTML elements.
//
// Description: Classes to which the element belongs.
//
// Value: Set of space-separated tokens.
func Class(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Class(value))
}

// Closedby
//
// Element(s): dialog.
//
// Description: Which user actions will close the dialog.
//
// Value: "any"; "closerequest"; "none";.
func Closedby(value string) interface {
	elems.DialogAttribute
} {
	return newAttrWrapper(attrs.Closedby(value))
}

// Color
//
// Element(s): link.
//
// Description: Color to use when customizing a site's icon (for rel="mask-icon").
//
// Value: CSS <color>.
func Color(value string) interface {
	elems.LinkAttribute
} {
	return newAttrWrapper(attrs.Color(value))
}

// Colorspace
//
// Element(s): input.
//
// Description: The color space of the serialized color.
//
// Value: "limited-srgb"; "display-p3".
func Colorspace(value string) interface {
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Colorspace(value))
}

// Cols
//
// Element(s): textarea.
//
// Description: Maximum number of characters per line.
//
// Value: Valid non-negative integer greater than zero.
func Cols(value string) interface {
	elems.TextareaAttribute
} {
	return newAttrWrapper(attrs.Cols(value))
}

// Colspan
//
// Element(s): td; th.
//
// Description: Number of columns that the cell is to span.
//
// Value: Valid non-negative integer greater than zero.
func Colspan(value string) interface {
	elems.TdAttribute
	elems.ThAttribute
} {
	return newAttrWrapper(attrs.Colspan(value))
}

// Command
//
// Element(s): button.
//
// Description: Indicates to the targeted element which action to take..
//
// Value: "toggle-popover"; "show-popover"; "hide-popover"; "close"; "request-close"; "show-modal"; a custom command keyword.
func Command(value string) interface {
	elems.ButtonAttribute
} {
	return newAttrWrapper(attrs.Command(value))
}

// Commandfor
//
// Element(s): button.
//
// Description: Targets another element to be invoked..
//
// Value: ID*.
func Commandfor(value string) interface {
	elems.ButtonAttribute
} {
	return newAttrWrapper(attrs.Commandfor(value))
}

// Content
//
// Element(s): meta.
//
// Description: Value of the element.
//
// Value: Text*.
func Content(value string) interface {
	elems.MetaAttribute
} {
	return newAttrWrapper(attrs.Content(value))
}

// Contenteditable
//
// Element(s): HTML elements.
//
// Description: Whether the element is editable.
//
// Value: "true"; "plaintext-only"; "false".
func Contenteditable(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Contenteditable(value))
}

// Controls
//
// Element(s): audio; video.
//
// Description: Show user agent controls.
//
// Value: Boolean attribute.
func Controls(value bool) interface {
	elems.AudioAttribute
	elems.VideoAttribute
} {
	return newAttrWrapper(attrs.Controls(value))
}

// Coords
//
// Element(s): area.
//
// Description: Coordinates for the shape to be created in an image map.
//
// Value: Valid list of floating-point numbers*.
func Coords(value string) interface {
	elems.AreaAttribute
} {
	return newAttrWrapper(attrs.Coords(value))
}

// Crossorigin
//
// Element(s): audio; img; link; script; video.
//
// Description: How the element handles crossorigin requests.
//
// Value: "anonymous"; "use-credentials".
func Crossorigin(value string) interface {
	elems.AudioAttribute
	elems.ImgAttribute
	elems.LinkAttribute
	elems.ScriptAttribute
	elems.VideoAttribute
} {
	return newAttrWrapper(attrs.Crossorigin(value))
}

// Data
//
// Element(s): object.
//
// Description: Address of the resource.
//
// Value: Valid non-empty URL potentially surrounded by spaces.
func Data(value string) interface {
	elems.ObjectAttribute
} {
	return newAttrWrapper(attrs.Data(value))
}

// Datetime
//
// Element(s): del; ins.
//
// Description: Date and (optionally) time of the change.
//
// Value: Valid date string with optional time.
//
// Element(s): time.
//
// Description: Machine-readable value.
//
// Value: Valid month string, valid date string, valid yearless date string, valid time string, valid local date and time string, valid time-zone offset string, valid global date and time string, valid week string, valid non-negative integer, or valid duration string.
func Datetime(value string) interface {
	elems.DelAttribute
	elems.InsAttribute
	elems.TimeAttribute
} {
	return newAttrWrapper(attrs.Datetime(value))
}

// Decoding
//
// Element(s): img.
//
// Description: Decoding hint to use when processing this image for presentation.
//
// Value: "sync"; "async"; "auto".
func Decoding(value string) interface {
	elems.ImgAttribute
} {
	return newAttrWrapper(attrs.Decoding(value))
}

// Default
//
// Element(s): track.
//
// Description: Enable the track if no other text track is more suitable.
//
// Value: Boolean attribute.
func Default(value bool) interface {
	elems.TrackAttribute
} {
	return newAttrWrapper(attrs.Default(value))
}

// Defer
//
// Element(s): script.
//
// Description: Defer script execution.
//
// Value: Boolean attribute.
func Defer(value bool) interface {
	elems.ScriptAttribute
} {
	return newAttrWrapper(attrs.Defer(value))
}

// Dir
//
// Element(s): HTML elements.
//
// Description: The text directionality of the element.
//
// Value: "ltr"; "rtl"; "auto".
//
// Element(s): bdo.
//
// Description: The text directionality of the element.
//
// Value: "ltr"; "rtl".
func Dir(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Dir(value))
}

// Dirname
//
// Element(s): input; textarea.
//
// Description: Name of form control to use for sending the element's directionality in form submission.
//
// Value: Text*.
func Dirname(value string) interface {
	elems.InputAttribute
	elems.TextareaAttribute
} {
	return newAttrWrapper(attrs.Dirname(value))
}

// Disabled
//
// Element(s): button; input; optgroup; option; select; textarea; form-associated custom elements.
//
// Description: Whether the form control is disabled.
//
// Value: Boolean attribute.
//
// Element(s): fieldset.
//
// Description: Whether the descendant form controls, except any inside legend, are disabled.
//
// Value: Boolean attribute.
//
// Element(s): link.
//
// Description: Whether the link is disabled.
//
// Value: Boolean attribute.
func Disabled(value bool) interface {
	elems.ButtonAttribute
	elems.InputAttribute
	elems.OptgroupAttribute
	elems.OptionAttribute
	elems.SelectAttribute
	elems.TextareaAttribute
	elems.FieldsetAttribute
	elems.LinkAttribute
} {
	return newAttrWrapper(attrs.Disabled(value))
}

// Download
//
// Element(s): a; area.
//
// Description: Whether to download the resource instead of navigating to it, and its filename if so.
//
// Value: Text.
func Download(value string) interface {
	elems.AAttribute
	elems.AreaAttribute
} {
	return newAttrWrapper(attrs.Download(value))
}

// Draggable
//
// Element(s): HTML elements.
//
// Description: Whether the element is draggable.
//
// Value: "true"; "false".
func Draggable(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Draggable(value))
}

// Enctype
//
// Element(s): form.
//
// Description: Entry list encoding type to use for form submission.
//
// Value: "application/x-www-form-urlencoded"; "multipart/form-data"; "text/plain".
func Enctype(value string) interface {
	elems.FormAttribute
} {
	return newAttrWrapper(attrs.Enctype(value))
}

// Enterkeyhint
//
// Element(s): HTML elements.
//
// Description: Hint for selecting an enter key action.
//
// Value: "enter"; "done"; "go"; "next"; "previous"; "search"; "send".
func Enterkeyhint(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Enterkeyhint(value))
}

// Fetchpriority
//
// Element(s): img; link; script.
//
// Description: Sets the priority for fetches initiated by the element.
//
// Value: "auto"; "high"; "low".
func Fetchpriority(value string) interface {
	elems.ImgAttribute
	elems.LinkAttribute
	elems.ScriptAttribute
} {
	return newAttrWrapper(attrs.Fetchpriority(value))
}

// For
//
// Element(s): label.
//
// Description: Associate the label with form control.
//
// Value: ID*.
//
// Element(s): output.
//
// Description: Specifies controls from which the output was calculated.
//
// Value: Unordered set of unique space-separated tokens consisting of IDs*.
func For(value string) interface {
	elems.LabelAttribute
	elems.OutputAttribute
} {
	return newAttrWrapper(attrs.For(value))
}

// Form
//
// Element(s): button; fieldset; input; object; output; select; textarea; form-associated custom elements.
//
// Description: Associates the element with a form element.
//
// Value: ID*.
func Form(value string) interface {
	elems.ButtonAttribute
	elems.FieldsetAttribute
	elems.InputAttribute
	elems.ObjectAttribute
	elems.OutputAttribute
	elems.SelectAttribute
	elems.TextareaAttribute
} {
	return newAttrWrapper(attrs.Form(value))
}

// Formaction
//
// Element(s): button; input.
//
// Description: URL to use for form submission.
//
// Value: Valid non-empty URL potentially surrounded by spaces.
func Formaction(value string) interface {
	elems.ButtonAttribute
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Formaction(value))
}

// Formenctype
//
// Element(s): button; input.
//
// Description: Entry list encoding type to use for form submission.
//
// Value: "application/x-www-form-urlencoded"; "multipart/form-data"; "text/plain".
func Formenctype(value string) interface {
	elems.ButtonAttribute
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Formenctype(value))
}

// Formmethod
//
// Element(s): button; input.
//
// Description: Variant to use for form submission.
//
// Value: "GET"; "POST"; "dialog".
func Formmethod(value string) interface {
	elems.ButtonAttribute
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Formmethod(value))
}

// Formnovalidate
//
// Element(s): button; input.
//
// Description: Bypass form control validation for form submission.
//
// Value: Boolean attribute.
func Formnovalidate(value bool) interface {
	elems.ButtonAttribute
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Formnovalidate(value))
}

// Formtarget
//
// Element(s): button; input.
//
// Description: Navigable for form submission.
//
// Value: Valid navigable target name or keyword.
func Formtarget(value string) interface {
	elems.ButtonAttribute
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Formtarget(value))
}

// Headers
//
// Element(s): td; th.
//
// Description: The header cells for this cell.
//
// Value: Unordered set of unique space-separated tokens consisting of IDs*.
func Headers(value string) interface {
	elems.TdAttribute
	elems.ThAttribute
} {
	return newAttrWrapper(attrs.Headers(value))
}

// Height
//
// Element(s): canvas; embed; iframe; img; input; object; source (in picture); video.
//
// Description: Vertical dimension.
//
// Value: Valid non-negative integer.
func Height(value string) interface {
	elems.CanvasAttribute
	elems.EmbedAttribute
	elems.IframeAttribute
	elems.ImgAttribute
	elems.InputAttribute
	elems.ObjectAttribute
	elems.SourceAttribute
	elems.VideoAttribute
} {
	return newAttrWrapper(attrs.Height(value))
}

// Hidden
//
// Element(s): HTML elements.
//
// Description: Whether the element is relevant.
//
// Value: "until-found"; "hidden"; the empty string.
func Hidden(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Hidden(value))
}

// High
//
// Element(s): meter.
//
// Description: Low limit of high range.
//
// Value: Valid floating-point number*.
func High(value string) interface {
	elems.MeterAttribute
} {
	return newAttrWrapper(attrs.High(value))
}

// Href
//
// Element(s): a; area.
//
// Description: Address of the hyperlink.
//
// Value: Valid URL potentially surrounded by spaces.
//
// Element(s): link.
//
// Description: Address of the hyperlink.
//
// Value: Valid non-empty URL potentially surrounded by spaces.
//
// Element(s): base.
//
// Description: Document base URL.
//
// Value: Valid URL potentially surrounded by spaces.
func Href(value string) interface {
	elems.AAttribute
	elems.AreaAttribute
	elems.LinkAttribute
	elems.BaseAttribute
} {
	return newAttrWrapper(attrs.Href(value))
}

// Hreflang
//
// Element(s): a; link.
//
// Description: Language of the linked resource.
//
// Value: Valid BCP 47 language tag.
func Hreflang(value string) interface {
	elems.AAttribute
	elems.LinkAttribute
} {
	return newAttrWrapper(attrs.Hreflang(value))
}

// HttpEquiv
//
// Element(s): meta.
//
// Description: Pragma directive.
//
// Value: "content-type"; "default-style"; "refresh"; "x-ua-compatible"; "content-security-policy".
func HttpEquiv(value string) interface {
	elems.MetaAttribute
} {
	return newAttrWrapper(attrs.HttpEquiv(value))
}

// Id
//
// Element(s): HTML elements.
//
// Description: The element's ID.
//
// Value: Text*.
func Id(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Id(value))
}

// Imagesizes
//
// Element(s): link.
//
// Description: Image sizes for different page layouts (for rel="preload").
//
// Value: Valid source size list.
func Imagesizes(value string) interface {
	elems.LinkAttribute
} {
	return newAttrWrapper(attrs.Imagesizes(value))
}

// Imagesrcset
//
// Element(s): link.
//
// Description: Images to use in different situations, e.g., high-resolution displays, small monitors, etc. (for rel="preload").
//
// Value: Comma-separated list of image candidate strings.
func Imagesrcset(value string) interface {
	elems.LinkAttribute
} {
	return newAttrWrapper(attrs.Imagesrcset(value))
}

// Inert
//
// Element(s): HTML elements.
//
// Description: Whether the element is inert..
//
// Value: Boolean attribute.
func Inert(value bool) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Inert(value))
}

// Inputmode
//
// Element(s): HTML elements.
//
// Description: Hint for selecting an input modality.
//
// Value: "none"; "text"; "tel"; "email"; "url"; "numeric"; "decimal"; "search".
func Inputmode(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Inputmode(value))
}

// Integrity
//
// Element(s): link; script.
//
// Description: Integrity metadata used in Subresource Integrity checks [SRI].
//
// Value: Text.
func Integrity(value string) interface {
	elems.LinkAttribute
	elems.ScriptAttribute
} {
	return newAttrWrapper(attrs.Integrity(value))
}

// Is
//
// Element(s): HTML elements.
//
// Description: Creates a customized built-in element.
//
// Value: Valid custom element name of a defined customized built-in element.
func Is(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Is(value))
}

// Ismap
//
// Element(s): img.
//
// Description: Whether the image is a server-side image map.
//
// Value: Boolean attribute.
func Ismap(value bool) interface {
	elems.ImgAttribute
} {
	return newAttrWrapper(attrs.Ismap(value))
}

// Itemid
//
// Element(s): HTML elements.
//
// Description: Global identifier for a microdata item.
//
// Value: Valid URL potentially surrounded by spaces.
func Itemid(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Itemid(value))
}

// Itemprop
//
// Element(s): HTML elements.
//
// Description: Property names of a microdata item.
//
// Value: Unordered set of unique space-separated tokens consisting of valid absolute URLs, defined property names, or text*.
func Itemprop(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Itemprop(value))
}

// Itemref
//
// Element(s): HTML elements.
//
// Description: Referenced elements.
//
// Value: Unordered set of unique space-separated tokens consisting of IDs*.
func Itemref(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Itemref(value))
}

// Itemscope
//
// Element(s): HTML elements.
//
// Description: Introduces a microdata item.
//
// Value: Boolean attribute.
func Itemscope(value bool) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Itemscope(value))
}

// Itemtype
//
// Element(s): HTML elements.
//
// Description: Item types of a microdata item.
//
// Value: Unordered set of unique space-separated tokens consisting of valid absolute URLs*.
func Itemtype(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Itemtype(value))
}

// Kind
//
// Element(s): track.
//
// Description: The type of text track.
//
// Value: "subtitles"; "captions"; "descriptions"; "chapters"; "metadata".
func Kind(value string) interface {
	elems.TrackAttribute
} {
	return newAttrWrapper(attrs.Kind(value))
}

// Label
//
// Element(s): optgroup; option; track.
//
// Description: User-visible label.
//
// Value: Text.
func Label(value string) interface {
	elems.OptgroupAttribute
	elems.OptionAttribute
	elems.TrackAttribute
} {
	return newAttrWrapper(attrs.Label(value))
}

// Lang
//
// Element(s): HTML elements.
//
// Description: Language of the element.
//
// Value: Valid BCP 47 language tag or the empty string.
func Lang(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Lang(value))
}

// List
//
// Element(s): input.
//
// Description: List of autocomplete options.
//
// Value: ID*.
func List(value string) interface {
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.List(value))
}

// Loading
//
// Element(s): iframe; img.
//
// Description: Used when determining loading deferral.
//
// Value: "lazy"; "eager".
func Loading(value string) interface {
	elems.IframeAttribute
	elems.ImgAttribute
} {
	return newAttrWrapper(attrs.Loading(value))
}

// Loop
//
// Element(s): audio; video.
//
// Description: Whether to loop the media resource.
//
// Value: Boolean attribute.
func Loop(value bool) interface {
	elems.AudioAttribute
	elems.VideoAttribute
} {
	return newAttrWrapper(attrs.Loop(value))
}

// Low
//
// Element(s): meter.
//
// Description: High limit of low range.
//
// Value: Valid floating-point number*.
func Low(value string) interface {
	elems.MeterAttribute
} {
	return newAttrWrapper(attrs.Low(value))
}

// Max
//
// Element(s): input.
//
// Description: Maximum value.
//
// Value: Varies*.
//
// Element(s): meter; progress.
//
// Description: Upper bound of range.
//
// Value: Valid floating-point number*.
func Max(value string) interface {
	elems.InputAttribute
	elems.MeterAttribute
	elems.ProgressAttribute
} {
	return newAttrWrapper(attrs.Max(value))
}

// Maxlength
//
// Element(s): input; textarea.
//
// Description: Maximum length of value.
//
// Value: Valid non-negative integer.
func Maxlength(value string) interface {
	elems.InputAttribute
	elems.TextareaAttribute
} {
	return newAttrWrapper(attrs.Maxlength(value))
}

// Media
//
// Element(s): link; meta; source; style.
//
// Description: Applicable media.
//
// Value: Valid media query list.
func Media(value string) interface {
	elems.LinkAttribute
	elems.MetaAttribute
	elems.SourceAttribute
	elems.StyleAttribute
} {
	return newAttrWrapper(attrs.Media(value))
}

// Method
//
// Element(s): form.
//
// Description: Variant to use for form submission.
//
// Value: "GET"; "POST"; "dialog".
func Method(value string) interface {
	elems.FormAttribute
} {
	return newAttrWrapper(attrs.Method(value))
}

// Min
//
// Element(s): input.
//
// Description: Minimum value.
//
// Value: Varies*.
//
// Element(s): meter.
//
// Description: Lower bound of range.
//
// Value: Valid floating-point number*.
func Min(value string) interface {
	elems.InputAttribute
	elems.MeterAttribute
} {
	return newAttrWrapper(attrs.Min(value))
}

// Minlength
//
// Element(s): input; textarea.
//
// Description: Minimum length of value.
//
// Value: Valid non-negative integer.
func Minlength(value string) interface {
	elems.InputAttribute
	elems.TextareaAttribute
} {
	return newAttrWrapper(attrs.Minlength(value))
}

// Multiple
//
// Element(s): input; select.
//
// Description: Whether to allow multiple values.
//
// Value: Boolean attribute.
func Multiple(value bool) interface {
	elems.InputAttribute
	elems.SelectAttribute
} {
	return newAttrWrapper(attrs.Multiple(value))
}

// Muted
//
// Element(s): audio; video.
//
// Description: Whether to mute the media resource by default.
//
// Value: Boolean attribute.
func Muted(value bool) interface {
	elems.AudioAttribute
	elems.VideoAttribute
} {
	return newAttrWrapper(attrs.Muted(value))
}

// Name
//
// Element(s): button; fieldset; input; output; select; textarea; form-associated custom elements.
//
// Description: Name of the element to use for form submission and in the form.elements API.
//
// Value: Text*.
//
// Element(s): details.
//
// Description: Name of group of mutually-exclusive details elements.
//
// Value: Text*.
//
// Element(s): form.
//
// Description: Name of form to use in the document.forms API.
//
// Value: Text*.
//
// Element(s): iframe; object.
//
// Description: Name of content navigable.
//
// Value: Valid navigable target name or keyword.
//
// Element(s): map.
//
// Description: Name of image map to reference from the usemap attribute.
//
// Value: Text*.
//
// Element(s): meta.
//
// Description: Metadata name.
//
// Value: Text*.
//
// Element(s): slot.
//
// Description: Name of shadow tree slot.
//
// Value: Text.
func Name(value string) interface {
	elems.ButtonAttribute
	elems.FieldsetAttribute
	elems.InputAttribute
	elems.OutputAttribute
	elems.SelectAttribute
	elems.TextareaAttribute
	elems.DetailsAttribute
	elems.FormAttribute
	elems.IframeAttribute
	elems.ObjectAttribute
	elems.MapAttribute
	elems.MetaAttribute
	elems.SlotAttribute
} {
	return newAttrWrapper(attrs.Name(value))
}

// Nomodule
//
// Element(s): script.
//
// Description: Prevents execution in user agents that support module scripts.
//
// Value: Boolean attribute.
func Nomodule(value bool) interface {
	elems.ScriptAttribute
} {
	return newAttrWrapper(attrs.Nomodule(value))
}

// Nonce
//
// Element(s): HTML elements.
//
// Description: Cryptographic nonce used in Content Security Policy checks [CSP].
//
// Value: Text.
func Nonce(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Nonce(value))
}

// Novalidate
//
// Element(s): form.
//
// Description: Bypass form control validation for form submission.
//
// Value: Boolean attribute.
func Novalidate(value bool) interface {
	elems.FormAttribute
} {
	return newAttrWrapper(attrs.Novalidate(value))
}

// Open
//
// Element(s): details.
//
// Description: Whether the details are visible.
//
// Value: Boolean attribute.
//
// Element(s): dialog.
//
// Description: Whether the dialog box is showing.
//
// Value: Boolean attribute.
func Open(value bool) interface {
	elems.DetailsAttribute
	elems.DialogAttribute
} {
	return newAttrWrapper(attrs.Open(value))
}

// Optimum
//
// Element(s): meter.
//
// Description: Optimum value in gauge.
//
// Value: Valid floating-point number*.
func Optimum(value string) interface {
	elems.MeterAttribute
} {
	return newAttrWrapper(attrs.Optimum(value))
}

// Pattern
//
// Element(s): input.
//
// Description: Pattern to be matched by the form control's value.
//
// Value: Regular expression matching the JavaScript Pattern production.
func Pattern(value string) interface {
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Pattern(value))
}

// Ping
//
// Element(s): a; area.
//
// Description: URLs to ping.
//
// Value: Set of space-separated tokens consisting of valid non-empty URLs.
func Ping(value string) interface {
	elems.AAttribute
	elems.AreaAttribute
} {
	return newAttrWrapper(attrs.Ping(value))
}

// Placeholder
//
// Element(s): input; textarea.
//
// Description: User-visible label to be placed within the form control.
//
// Value: Text*.
func Placeholder(value string) interface {
	elems.InputAttribute
	elems.TextareaAttribute
} {
	return newAttrWrapper(attrs.Placeholder(value))
}

// Playsinline
//
// Element(s): video.
//
// Description: Encourage the user agent to display video content within the element's playback area.
//
// Value: Boolean attribute.
func Playsinline(value bool) interface {
	elems.VideoAttribute
} {
	return newAttrWrapper(attrs.Playsinline(value))
}

// Popover
//
// Element(s): HTML elements.
//
// Description: Makes the element a popover element.
//
// Value: "auto"; "manual"; "hint".
func Popover(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Popover(value))
}

// Popovertarget
//
// Element(s): button; input.
//
// Description: Targets a popover element to toggle, show, or hide.
//
// Value: ID*.
func Popovertarget(value string) interface {
	elems.ButtonAttribute
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Popovertarget(value))
}

// Popovertargetaction
//
// Element(s): button; input.
//
// Description: Indicates whether a targeted popover element is to be toggled, shown, or hidden.
//
// Value: "toggle"; "show"; "hide".
func Popovertargetaction(value string) interface {
	elems.ButtonAttribute
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Popovertargetaction(value))
}

// Poster
//
// Element(s): video.
//
// Description: Poster frame to show prior to video playback.
//
// Value: Valid non-empty URL potentially surrounded by spaces.
func Poster(value string) interface {
	elems.VideoAttribute
} {
	return newAttrWrapper(attrs.Poster(value))
}

// Preload
//
// Element(s): audio; video.
//
// Description: Hints how much buffering the media resource will likely need.
//
// Value: "none"; "metadata"; "auto".
func Preload(value string) interface {
	elems.AudioAttribute
	elems.VideoAttribute
} {
	return newAttrWrapper(attrs.Preload(value))
}

// Readonly
//
// Element(s): input; textarea.
//
// Description: Whether to allow the value to be edited by the user.
//
// Value: Boolean attribute.
//
// Element(s): form-associated custom elements.
//
// Description: Affects willValidate, plus any behavior added by the custom element author.
//
// Value: Boolean attribute.
func Readonly(value bool) interface {
	elems.InputAttribute
	elems.TextareaAttribute
} {
	return newAttrWrapper(attrs.Readonly(value))
}

// Referrerpolicy
//
// Element(s): a; area; iframe; img; link; script.
//
// Description: Referrer policy for fetches initiated by the element.
//
// Value: Referrer policy.
func Referrerpolicy(value string) interface {
	elems.AAttribute
	elems.AreaAttribute
	elems.IframeAttribute
	elems.ImgAttribute
	elems.LinkAttribute
	elems.ScriptAttribute
} {
	return newAttrWrapper(attrs.Referrerpolicy(value))
}

// Rel
//
// Element(s): a; area.
//
// Description: Relationship between the location in the document containing the hyperlink and the destination resource.
//
// Value: Unordered set of unique space-separated tokens*.
//
// Element(s): link.
//
// Description: Relationship between the document containing the hyperlink and the destination resource.
//
// Value: Unordered set of unique space-separated tokens*.
func Rel(value string) interface {
	elems.AAttribute
	elems.AreaAttribute
	elems.LinkAttribute
} {
	return newAttrWrapper(attrs.Rel(value))
}

// Required
//
// Element(s): input; select; textarea.
//
// Description: Whether the control is required for form submission.
//
// Value: Boolean attribute.
func Required(value bool) interface {
	elems.InputAttribute
	elems.SelectAttribute
	elems.TextareaAttribute
} {
	return newAttrWrapper(attrs.Required(value))
}

// Reversed
//
// Element(s): ol.
//
// Description: Number the list backwards.
//
// Value: Boolean attribute.
func Reversed(value bool) interface {
	elems.OlAttribute
} {
	return newAttrWrapper(attrs.Reversed(value))
}

// Rows
//
// Element(s): textarea.
//
// Description: Number of lines to show.
//
// Value: Valid non-negative integer greater than zero.
func Rows(value string) interface {
	elems.TextareaAttribute
} {
	return newAttrWrapper(attrs.Rows(value))
}

// Rowspan
//
// Element(s): td; th.
//
// Description: Number of rows that the cell is to span.
//
// Value: Valid non-negative integer.
func Rowspan(value string) interface {
	elems.TdAttribute
	elems.ThAttribute
} {
	return newAttrWrapper(attrs.Rowspan(value))
}

// Sandbox
//
// Element(s): iframe.
//
// Description: Security rules for nested content.
//
// Value: Unordered set of unique space-separated tokens, ASCII case-insensitive, consisting of "allow-downloads""allow-forms""allow-modals""allow-orientation-lock""allow-pointer-lock""allow-popups""allow-popups-to-escape-sandbox""allow-presentation""allow-same-origin""allow-scripts""allow-top-navigation""allow-top-navigation-by-user-activation""allow-top-navigation-to-custom-protocols".
func Sandbox(value string) interface {
	elems.IframeAttribute
} {
	return newAttrWrapper(attrs.Sandbox(value))
}

// Scope
//
// Element(s): th.
//
// Description: Specifies which cells the header cell applies to.
//
// Value: "row"; "col"; "rowgroup"; "colgroup".
func Scope(value string) interface {
	elems.ThAttribute
} {
	return newAttrWrapper(attrs.Scope(value))
}

// Selected
//
// Element(s): option.
//
// Description: Whether the option is selected by default.
//
// Value: Boolean attribute.
func Selected(value bool) interface {
	elems.OptionAttribute
} {
	return newAttrWrapper(attrs.Selected(value))
}

// Shadowrootclonable
//
// Element(s): template.
//
// Description: Sets clonable on a declarative shadow root.
//
// Value: Boolean attribute.
func Shadowrootclonable(value bool) interface {
	elems.TemplateAttribute
} {
	return newAttrWrapper(attrs.Shadowrootclonable(value))
}

// Shadowrootcustomelementregistry
//
// Element(s): template.
//
// Description: Enables declarative shadow roots to indicate they will use a custom element registry.
//
// Value: Boolean attribute.
func Shadowrootcustomelementregistry(value bool) interface {
	elems.TemplateAttribute
} {
	return newAttrWrapper(attrs.Shadowrootcustomelementregistry(value))
}

// Shadowrootdelegatesfocus
//
// Element(s): template.
//
// Description: Sets delegates focus on a declarative shadow root.
//
// Value: Boolean attribute.
func Shadowrootdelegatesfocus(value bool) interface {
	elems.TemplateAttribute
} {
	return newAttrWrapper(attrs.Shadowrootdelegatesfocus(value))
}

// Shadowrootmode
//
// Element(s): template.
//
// Description: Enables streaming declarative shadow roots.
//
// Value: "open"; "closed".
func Shadowrootmode(value string) interface {
	elems.TemplateAttribute
} {
	return newAttrWrapper(attrs.Shadowrootmode(value))
}

// Shadowrootserializable
//
// Element(s): template.
//
// Description: Sets serializable on a declarative shadow root.
//
// Value: Boolean attribute.
func Shadowrootserializable(value bool) interface {
	elems.TemplateAttribute
} {
	return newAttrWrapper(attrs.Shadowrootserializable(value))
}

// Shape
//
// Element(s): area.
//
// Description: The kind of shape to be created in an image map.
//
// Value: "circle"; "default"; "poly"; "rect".
func Shape(value string) interface {
	elems.AreaAttribute
} {
	return newAttrWrapper(attrs.Shape(value))
}

// Size
//
// Element(s): input; select.
//
// Description: Size of the control.
//
// Value: Valid non-negative integer greater than zero.
func Size(value string) interface {
	elems.InputAttribute
	elems.SelectAttribute
} {
	return newAttrWrapper(attrs.Size(value))
}

// Sizes
//
// Element(s): link.
//
// Description: Sizes of the icons (for rel="icon").
//
// Value: Unordered set of unique space-separated tokens, ASCII case-insensitive, consisting of sizes*.
//
// Element(s): img; source.
//
// Description: Image sizes for different page layouts.
//
// Value: Valid source size list.
func Sizes(value string) interface {
	elems.LinkAttribute
	elems.ImgAttribute
	elems.SourceAttribute
} {
	return newAttrWrapper(attrs.Sizes(value))
}

// Slot
//
// Element(s): HTML elements.
//
// Description: The element's desired slot.
//
// Value: Text.
func Slot(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Slot(value))
}

// Span
//
// Element(s): col; colgroup.
//
// Description: Number of columns spanned by the element.
//
// Value: Valid non-negative integer greater than zero.
func Span(value string) interface {
	elems.ColAttribute
	elems.ColgroupAttribute
} {
	return newAttrWrapper(attrs.Span(value))
}

// Spellcheck
//
// Element(s): HTML elements.
//
// Description: Whether the element is to have its spelling and grammar checked.
//
// Value: "true"; "false"; the empty string.
func Spellcheck(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Spellcheck(value))
}

// Src
//
// Element(s): audio; embed; iframe; img; input; script; source (in video or audio); track; video.
//
// Description: Address of the resource.
//
// Value: Valid non-empty URL potentially surrounded by spaces.
func Src(value string) types.Src {
	return types.Src{IAttribute: attrs.Src(value)}
}

// Srcdoc
//
// Element(s): iframe.
//
// Description: A document to render in the iframe.
//
// Value: The source of an iframe srcdoc document*.
func Srcdoc(value string) interface {
	elems.IframeAttribute
} {
	return newAttrWrapper(attrs.Srcdoc(value))
}

// Srclang
//
// Element(s): track.
//
// Description: Language of the text track.
//
// Value: Valid BCP 47 language tag.
func Srclang(value string) interface {
	elems.TrackAttribute
} {
	return newAttrWrapper(attrs.Srclang(value))
}

// Srcset
//
// Element(s): img; source.
//
// Description: Images to use in different situations, e.g., high-resolution displays, small monitors, etc..
//
// Value: Comma-separated list of image candidate strings.
func Srcset(value string) interface {
	elems.ImgAttribute
	elems.SourceAttribute
} {
	return newAttrWrapper(attrs.Srcset(value))
}

// Start
//
// Element(s): ol.
//
// Description: Starting value of the list.
//
// Value: Valid integer.
func Start(value string) interface {
	elems.OlAttribute
} {
	return newAttrWrapper(attrs.Start(value))
}

// Step
//
// Element(s): input.
//
// Description: Granularity to be matched by the form control's value.
//
// Value: Valid floating-point number greater than zero, or "any".
func Step(value string) interface {
	elems.InputAttribute
} {
	return newAttrWrapper(attrs.Step(value))
}

// Style
//
// Element(s): HTML elements.
//
// Description: Presentational and formatting instructions.
//
// Value: CSS declarations*.
func Style(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Style(value))
}

// Tabindex
//
// Element(s): HTML elements.
//
// Description: Whether the element is focusable and sequentially focusable, and the relative order of the element for the purposes of sequential focus navigation.
//
// Value: Valid integer.
func Tabindex(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Tabindex(value))
}

// Target
//
// Element(s): a; area.
//
// Description: Navigable for hyperlink navigation.
//
// Value: Valid navigable target name or keyword.
//
// Element(s): base.
//
// Description: Default navigable for hyperlink navigation and form submission.
//
// Value: Valid navigable target name or keyword.
//
// Element(s): form.
//
// Description: Navigable for form submission.
//
// Value: Valid navigable target name or keyword.
func Target(value string) interface {
	elems.AAttribute
	elems.AreaAttribute
	elems.BaseAttribute
	elems.FormAttribute
} {
	return newAttrWrapper(attrs.Target(value))
}

// Title
//
// Element(s): HTML elements.
//
// Description: Advisory information for the element.
//
// Value: Text.
//
// Element(s): abbr; dfn.
//
// Description: Full term or expansion of abbreviation.
//
// Value: Text.
//
// Element(s): input.
//
// Description: Description of pattern (when used with pattern attribute).
//
// Value: Text.
//
// Element(s): link.
//
// Description: Title of the link.
//
// Value: Text.
//
// Element(s): link; style.
//
// Description: CSS style sheet set name.
//
// Value: Text.
func Title(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Title(value))
}

// Translate
//
// Element(s): HTML elements.
//
// Description: Whether the element is to be translated when the page is localized.
//
// Value: "yes"; "no".
func Translate(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Translate(value))
}

// Type
//
// Element(s): a; link.
//
// Description: Hint for the type of the referenced resource.
//
// Value: Valid MIME type string.
//
// Element(s): button.
//
// Description: Type of button.
//
// Value: "submit"; "reset"; "button".
//
// Element(s): embed; object; source.
//
// Description: Type of embedded resource.
//
// Value: Valid MIME type string.
//
// Element(s): input.
//
// Description: Type of form control.
//
// Value: input type keyword.
//
// Element(s): ol.
//
// Description: Kind of list marker.
//
// Value: "1"; "a"; "A"; "i"; "I".
//
// Element(s): script.
//
// Description: Type of script.
//
// Value: "module"; a valid MIME type string that is not a JavaScript MIME type essence match.
func Type(value string) interface {
	elems.AAttribute
	elems.LinkAttribute
	elems.ButtonAttribute
	elems.EmbedAttribute
	elems.ObjectAttribute
	elems.SourceAttribute
	elems.InputAttribute
	elems.OlAttribute
	elems.ScriptAttribute
} {
	return newAttrWrapper(attrs.Type(value))
}

// Usemap
//
// Element(s): img.
//
// Description: Name of image map to use.
//
// Value: Valid hash-name reference*.
func Usemap(value string) interface {
	elems.ImgAttribute
} {
	return newAttrWrapper(attrs.Usemap(value))
}

// Value
//
// Element(s): button; option.
//
// Description: Value to be used for form submission.
//
// Value: Text.
//
// Element(s): data.
//
// Description: Machine-readable value.
//
// Value: Text*.
//
// Element(s): input.
//
// Description: Value of the form control.
//
// Value: Varies*.
//
// Element(s): li.
//
// Description: Ordinal value of the list item.
//
// Value: Valid integer.
//
// Element(s): meter; progress.
//
// Description: Current value of the element.
//
// Value: Valid floating-point number.
func Value(value string) types.Value {
	return types.Value{IAttribute: attrs.Value(value)}
}

// Width
//
// Element(s): canvas; embed; iframe; img; input; object; source (in picture); video.
//
// Description: Horizontal dimension.
//
// Value: Valid non-negative integer.
func Width(value string) interface {
	elems.CanvasAttribute
	elems.EmbedAttribute
	elems.IframeAttribute
	elems.ImgAttribute
	elems.InputAttribute
	elems.ObjectAttribute
	elems.SourceAttribute
	elems.VideoAttribute
} {
	return newAttrWrapper(attrs.Width(value))
}

// Wrap
//
// Element(s): textarea.
//
// Description: How the value of the form control is to be wrapped for form submission.
//
// Value: "soft"; "hard".
func Wrap(value string) interface {
	elems.TextareaAttribute
} {
	return newAttrWrapper(attrs.Wrap(value))
}

// Writingsuggestions
//
// Element(s): HTML elements.
//
// Description: Whether the element can offer writing suggestions or not..
//
// Value: "true"; "false"; the empty string.
func Writingsuggestions(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Writingsuggestions(value))
}

// Onafterprint
//
// Element(s): body.
//
// Description: afterprint event handler for Window object.
//
// Value: Event handler content attribute.
func Onafterprint(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onafterprint(value))
}

// Onauxclick
//
// Element(s): HTML elements.
//
// Description: auxclick event handler.
//
// Value: Event handler content attribute.
func Onauxclick(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onauxclick(value))
}

// Onbeforeinput
//
// Element(s): HTML elements.
//
// Description: beforeinput event handler.
//
// Value: Event handler content attribute.
func Onbeforeinput(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onbeforeinput(value))
}

// Onbeforematch
//
// Element(s): HTML elements.
//
// Description: beforematch event handler.
//
// Value: Event handler content attribute.
func Onbeforematch(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onbeforematch(value))
}

// Onbeforeprint
//
// Element(s): body.
//
// Description: beforeprint event handler for Window object.
//
// Value: Event handler content attribute.
func Onbeforeprint(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onbeforeprint(value))
}

// Onbeforeunload
//
// Element(s): body.
//
// Description: beforeunload event handler for Window object.
//
// Value: Event handler content attribute.
func Onbeforeunload(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onbeforeunload(value))
}

// Onbeforetoggle
//
// Element(s): HTML elements.
//
// Description: beforetoggle event handler.
//
// Value: Event handler content attribute.
func Onbeforetoggle(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onbeforetoggle(value))
}

// Onblur
//
// Element(s): HTML elements.
//
// Description: blur event handler.
//
// Value: Event handler content attribute.
func Onblur(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onblur(value))
}

// Oncancel
//
// Element(s): HTML elements.
//
// Description: cancel event handler.
//
// Value: Event handler content attribute.
func Oncancel(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Oncancel(value))
}

// Oncanplay
//
// Element(s): HTML elements.
//
// Description: canplay event handler.
//
// Value: Event handler content attribute.
func Oncanplay(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Oncanplay(value))
}

// Oncanplaythrough
//
// Element(s): HTML elements.
//
// Description: canplaythrough event handler.
//
// Value: Event handler content attribute.
func Oncanplaythrough(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Oncanplaythrough(value))
}

// Onchange
//
// Element(s): HTML elements.
//
// Description: change event handler.
//
// Value: Event handler content attribute.
func Onchange(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onchange(value))
}

// Onclick
//
// Element(s): HTML elements.
//
// Description: click event handler.
//
// Value: Event handler content attribute.
func Onclick(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onclick(value))
}

// Onclose
//
// Element(s): HTML elements.
//
// Description: close event handler.
//
// Value: Event handler content attribute.
func Onclose(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onclose(value))
}

// Oncommand
//
// Element(s): HTML elements.
//
// Description: command event handler.
//
// Value: Event handler content attribute.
func Oncommand(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Oncommand(value))
}

// Oncontextlost
//
// Element(s): HTML elements.
//
// Description: contextlost event handler.
//
// Value: Event handler content attribute.
func Oncontextlost(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Oncontextlost(value))
}

// Oncontextmenu
//
// Element(s): HTML elements.
//
// Description: contextmenu event handler.
//
// Value: Event handler content attribute.
func Oncontextmenu(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Oncontextmenu(value))
}

// Oncontextrestored
//
// Element(s): HTML elements.
//
// Description: contextrestored event handler.
//
// Value: Event handler content attribute.
func Oncontextrestored(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Oncontextrestored(value))
}

// Oncopy
//
// Element(s): HTML elements.
//
// Description: copy event handler.
//
// Value: Event handler content attribute.
func Oncopy(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Oncopy(value))
}

// Oncuechange
//
// Element(s): HTML elements.
//
// Description: cuechange event handler.
//
// Value: Event handler content attribute.
func Oncuechange(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Oncuechange(value))
}

// Oncut
//
// Element(s): HTML elements.
//
// Description: cut event handler.
//
// Value: Event handler content attribute.
func Oncut(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Oncut(value))
}

// Ondblclick
//
// Element(s): HTML elements.
//
// Description: dblclick event handler.
//
// Value: Event handler content attribute.
func Ondblclick(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Ondblclick(value))
}

// Ondrag
//
// Element(s): HTML elements.
//
// Description: drag event handler.
//
// Value: Event handler content attribute.
func Ondrag(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Ondrag(value))
}

// Ondragend
//
// Element(s): HTML elements.
//
// Description: dragend event handler.
//
// Value: Event handler content attribute.
func Ondragend(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Ondragend(value))
}

// Ondragenter
//
// Element(s): HTML elements.
//
// Description: dragenter event handler.
//
// Value: Event handler content attribute.
func Ondragenter(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Ondragenter(value))
}

// Ondragleave
//
// Element(s): HTML elements.
//
// Description: dragleave event handler.
//
// Value: Event handler content attribute.
func Ondragleave(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Ondragleave(value))
}

// Ondragover
//
// Element(s): HTML elements.
//
// Description: dragover event handler.
//
// Value: Event handler content attribute.
func Ondragover(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Ondragover(value))
}

// Ondragstart
//
// Element(s): HTML elements.
//
// Description: dragstart event handler.
//
// Value: Event handler content attribute.
func Ondragstart(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Ondragstart(value))
}

// Ondrop
//
// Element(s): HTML elements.
//
// Description: drop event handler.
//
// Value: Event handler content attribute.
func Ondrop(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Ondrop(value))
}

// Ondurationchange
//
// Element(s): HTML elements.
//
// Description: durationchange event handler.
//
// Value: Event handler content attribute.
func Ondurationchange(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Ondurationchange(value))
}

// Onemptied
//
// Element(s): HTML elements.
//
// Description: emptied event handler.
//
// Value: Event handler content attribute.
func Onemptied(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onemptied(value))
}

// Onended
//
// Element(s): HTML elements.
//
// Description: ended event handler.
//
// Value: Event handler content attribute.
func Onended(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onended(value))
}

// Onerror
//
// Element(s): HTML elements.
//
// Description: error event handler.
//
// Value: Event handler content attribute.
func Onerror(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onerror(value))
}

// Onfocus
//
// Element(s): HTML elements.
//
// Description: focus event handler.
//
// Value: Event handler content attribute.
func Onfocus(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onfocus(value))
}

// Onformdata
//
// Element(s): HTML elements.
//
// Description: formdata event handler.
//
// Value: Event handler content attribute.
func Onformdata(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onformdata(value))
}

// Onhashchange
//
// Element(s): body.
//
// Description: hashchange event handler for Window object.
//
// Value: Event handler content attribute.
func Onhashchange(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onhashchange(value))
}

// Oninput
//
// Element(s): HTML elements.
//
// Description: input event handler.
//
// Value: Event handler content attribute.
func Oninput(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Oninput(value))
}

// Oninvalid
//
// Element(s): HTML elements.
//
// Description: invalid event handler.
//
// Value: Event handler content attribute.
func Oninvalid(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Oninvalid(value))
}

// Onkeydown
//
// Element(s): HTML elements.
//
// Description: keydown event handler.
//
// Value: Event handler content attribute.
func Onkeydown(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onkeydown(value))
}

// Onkeypress
//
// Element(s): HTML elements.
//
// Description: keypress event handler.
//
// Value: Event handler content attribute.
func Onkeypress(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onkeypress(value))
}

// Onkeyup
//
// Element(s): HTML elements.
//
// Description: keyup event handler.
//
// Value: Event handler content attribute.
func Onkeyup(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onkeyup(value))
}

// Onlanguagechange
//
// Element(s): body.
//
// Description: languagechange event handler for Window object.
//
// Value: Event handler content attribute.
func Onlanguagechange(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onlanguagechange(value))
}

// Onload
//
// Element(s): HTML elements.
//
// Description: load event handler.
//
// Value: Event handler content attribute.
func Onload(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onload(value))
}

// Onloadeddata
//
// Element(s): HTML elements.
//
// Description: loadeddata event handler.
//
// Value: Event handler content attribute.
func Onloadeddata(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onloadeddata(value))
}

// Onloadedmetadata
//
// Element(s): HTML elements.
//
// Description: loadedmetadata event handler.
//
// Value: Event handler content attribute.
func Onloadedmetadata(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onloadedmetadata(value))
}

// Onloadstart
//
// Element(s): HTML elements.
//
// Description: loadstart event handler.
//
// Value: Event handler content attribute.
func Onloadstart(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onloadstart(value))
}

// Onmessage
//
// Element(s): body.
//
// Description: message event handler for Window object.
//
// Value: Event handler content attribute.
func Onmessage(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onmessage(value))
}

// Onmessageerror
//
// Element(s): body.
//
// Description: messageerror event handler for Window object.
//
// Value: Event handler content attribute.
func Onmessageerror(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onmessageerror(value))
}

// Onmousedown
//
// Element(s): HTML elements.
//
// Description: mousedown event handler.
//
// Value: Event handler content attribute.
func Onmousedown(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onmousedown(value))
}

// Onmouseenter
//
// Element(s): HTML elements.
//
// Description: mouseenter event handler.
//
// Value: Event handler content attribute.
func Onmouseenter(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onmouseenter(value))
}

// Onmouseleave
//
// Element(s): HTML elements.
//
// Description: mouseleave event handler.
//
// Value: Event handler content attribute.
func Onmouseleave(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onmouseleave(value))
}

// Onmousemove
//
// Element(s): HTML elements.
//
// Description: mousemove event handler.
//
// Value: Event handler content attribute.
func Onmousemove(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onmousemove(value))
}

// Onmouseout
//
// Element(s): HTML elements.
//
// Description: mouseout event handler.
//
// Value: Event handler content attribute.
func Onmouseout(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onmouseout(value))
}

// Onmouseover
//
// Element(s): HTML elements.
//
// Description: mouseover event handler.
//
// Value: Event handler content attribute.
func Onmouseover(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onmouseover(value))
}

// Onmouseup
//
// Element(s): HTML elements.
//
// Description: mouseup event handler.
//
// Value: Event handler content attribute.
func Onmouseup(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onmouseup(value))
}

// Onoffline
//
// Element(s): body.
//
// Description: offline event handler for Window object.
//
// Value: Event handler content attribute.
func Onoffline(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onoffline(value))
}

// Ononline
//
// Element(s): body.
//
// Description: online event handler for Window object.
//
// Value: Event handler content attribute.
func Ononline(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Ononline(value))
}

// Onpagehide
//
// Element(s): body.
//
// Description: pagehide event handler for Window object.
//
// Value: Event handler content attribute.
func Onpagehide(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onpagehide(value))
}

// Onpagereveal
//
// Element(s): body.
//
// Description: pagereveal event handler for Window object.
//
// Value: Event handler content attribute.
func Onpagereveal(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onpagereveal(value))
}

// Onpageshow
//
// Element(s): body.
//
// Description: pageshow event handler for Window object.
//
// Value: Event handler content attribute.
func Onpageshow(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onpageshow(value))
}

// Onpageswap
//
// Element(s): body.
//
// Description: pageswap event handler for Window object.
//
// Value: Event handler content attribute.
func Onpageswap(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onpageswap(value))
}

// Onpaste
//
// Element(s): HTML elements.
//
// Description: paste event handler.
//
// Value: Event handler content attribute.
func Onpaste(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onpaste(value))
}

// Onpause
//
// Element(s): HTML elements.
//
// Description: pause event handler.
//
// Value: Event handler content attribute.
func Onpause(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onpause(value))
}

// Onplay
//
// Element(s): HTML elements.
//
// Description: play event handler.
//
// Value: Event handler content attribute.
func Onplay(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onplay(value))
}

// Onplaying
//
// Element(s): HTML elements.
//
// Description: playing event handler.
//
// Value: Event handler content attribute.
func Onplaying(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onplaying(value))
}

// Onpopstate
//
// Element(s): body.
//
// Description: popstate event handler for Window object.
//
// Value: Event handler content attribute.
func Onpopstate(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onpopstate(value))
}

// Onprogress
//
// Element(s): HTML elements.
//
// Description: progress event handler.
//
// Value: Event handler content attribute.
func Onprogress(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onprogress(value))
}

// Onratechange
//
// Element(s): HTML elements.
//
// Description: ratechange event handler.
//
// Value: Event handler content attribute.
func Onratechange(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onratechange(value))
}

// Onreset
//
// Element(s): HTML elements.
//
// Description: reset event handler.
//
// Value: Event handler content attribute.
func Onreset(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onreset(value))
}

// Onresize
//
// Element(s): HTML elements.
//
// Description: resize event handler.
//
// Value: Event handler content attribute.
func Onresize(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onresize(value))
}

// Onrejectionhandled
//
// Element(s): body.
//
// Description: rejectionhandled event handler for Window object.
//
// Value: Event handler content attribute.
func Onrejectionhandled(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onrejectionhandled(value))
}

// Onscroll
//
// Element(s): HTML elements.
//
// Description: scroll event handler.
//
// Value: Event handler content attribute.
func Onscroll(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onscroll(value))
}

// Onscrollend
//
// Element(s): HTML elements.
//
// Description: scrollend event handler.
//
// Value: Event handler content attribute.
func Onscrollend(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onscrollend(value))
}

// Onsecuritypolicyviolation
//
// Element(s): HTML elements.
//
// Description: securitypolicyviolation event handler.
//
// Value: Event handler content attribute.
func Onsecuritypolicyviolation(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onsecuritypolicyviolation(value))
}

// Onseeked
//
// Element(s): HTML elements.
//
// Description: seeked event handler.
//
// Value: Event handler content attribute.
func Onseeked(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onseeked(value))
}

// Onseeking
//
// Element(s): HTML elements.
//
// Description: seeking event handler.
//
// Value: Event handler content attribute.
func Onseeking(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onseeking(value))
}

// Onselect
//
// Element(s): HTML elements.
//
// Description: select event handler.
//
// Value: Event handler content attribute.
func Onselect(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onselect(value))
}

// Onslotchange
//
// Element(s): HTML elements.
//
// Description: slotchange event handler.
//
// Value: Event handler content attribute.
func Onslotchange(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onslotchange(value))
}

// Onstalled
//
// Element(s): HTML elements.
//
// Description: stalled event handler.
//
// Value: Event handler content attribute.
func Onstalled(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onstalled(value))
}

// Onstorage
//
// Element(s): body.
//
// Description: storage event handler for Window object.
//
// Value: Event handler content attribute.
func Onstorage(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onstorage(value))
}

// Onsubmit
//
// Element(s): HTML elements.
//
// Description: submit event handler.
//
// Value: Event handler content attribute.
func Onsubmit(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onsubmit(value))
}

// Onsuspend
//
// Element(s): HTML elements.
//
// Description: suspend event handler.
//
// Value: Event handler content attribute.
func Onsuspend(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onsuspend(value))
}

// Ontimeupdate
//
// Element(s): HTML elements.
//
// Description: timeupdate event handler.
//
// Value: Event handler content attribute.
func Ontimeupdate(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Ontimeupdate(value))
}

// Ontoggle
//
// Element(s): HTML elements.
//
// Description: toggle event handler.
//
// Value: Event handler content attribute.
func Ontoggle(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Ontoggle(value))
}

// Onunhandledrejection
//
// Element(s): body.
//
// Description: unhandledrejection event handler for Window object.
//
// Value: Event handler content attribute.
func Onunhandledrejection(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onunhandledrejection(value))
}

// Onunload
//
// Element(s): body.
//
// Description: unload event handler for Window object.
//
// Value: Event handler content attribute.
func Onunload(value string) interface {
	elems.BodyAttribute
} {
	return newAttrWrapper(attrs.Onunload(value))
}

// Onvolumechange
//
// Element(s): HTML elements.
//
// Description: volumechange event handler.
//
// Value: Event handler content attribute.
func Onvolumechange(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onvolumechange(value))
}

// Onwaiting
//
// Element(s): HTML elements.
//
// Description: waiting event handler.
//
// Value: Event handler content attribute.
func Onwaiting(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onwaiting(value))
}

// Onwheel
//
// Element(s): HTML elements.
//
// Description: wheel event handler.
//
// Value: Event handler content attribute.
func Onwheel(value string) interface {
	elems.GlobalAttribute
} {
	return newAttrWrapper(attrs.Onwheel(value))
}
