// Code generated by "go run -C ../../generate ./"; DO NOT EDIT.
// HTML spec at https://html.spec.whatwg.org/multipage/indices.html

package elems

import (
	"github.com/ramonpetgrave64/go-html-compose/pkg/doc"
	"github.com/ramonpetgrave64/go-html-compose/pkg/html/elems"
)

// Ul
// Description: List.
// Parents: flow.
// Children: li; script-supporting elements.
// Attributes: globals
func Ul(ulAttrs ...UlAttribute) TypedContContainerFunc[doc.IContent, UlChild] {
	typedConterFunc := func(children ...UlChild) doc.IContent {
		convertedAttributes := toIAttributes(ulAttrs) // Corrected: No need to specify T for toIAttributes
		convertedChildren := toIContent(children)
		return elems.Ul(convertedAttributes...)(convertedChildren...)
	}
	return typedConterFunc
}

func ContContainerFuncWrapper[P, C doc.IContent, A doc.IAttribute](attrs ...A) TypedContContainerFunc[P, C] {
	return func(children ...C) P {
		wrappedContent := newContentWrapper(elems.Li(toIAttributes(attrs)...)(toIContent(children)...))
		return wrappedContent.IContent.(P)
	}
}

// Li
// Description: List item.
// Parents: ol; ul; menu*.
// Children: flow.
// Attributes: globals; value*
func Li(attrs ...LiAttribute) TypedContContainerFunc[LiType, LiChild] {
	// return newContentWrapper3[LiType, LiAttribute, LiChild](elems.Li, attrs)
	return func(children ...LiChild) LiType {
		return newContentWrapper2(elems.Li, attrs, children)
	}
}

// Script
// Description: Embedded script.
// Parents: head; phrasing; script-supporting.
// Children: script, data, or script documentation*.
// Attributes: globals; src; type; nomodule; async; defer; crossorigin; integrity; referrerpolicy; blocking; fetchpriority
func Script(attrs ...ScriptAttribute) TypedContContainerFunc[ScriptType, ScriptChild] {
	// return elems.Script(toIAttributes(attrs)...)
	return func(children ...ScriptChild) ScriptType {
		return newContentWrapper2(elems.Li, attrs, children)
	}
}

// A
// Description: Hyperlink.
// Parents: phrasing.
// Children: transparent*.
// Attributes: globals; href; target; download; ping; rel; hreflang; type; referrerpolicy
func A(aAttrs ...AAttribute) doc.ContContainerFunc {
	return elems.A(toIAttributes(aAttrs)...)
}

// Abbr
// Description: Abbreviation.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Abbr(abbrAttrs ...AbbrAttribute) doc.ContContainerFunc {
	return elems.Abbr(toIAttributes(abbrAttrs)...)
}

// Address
// Description: Contact information for a page or article element.
// Parents: flow.
// Children: flow*.
// Attributes: globals
func Address(addressAttrs ...AddressAttribute) doc.ContContainerFunc {
	return elems.Address(toIAttributes(addressAttrs)...)
}

// Area
// Description: Hyperlink or dead area on an image map.
// Parents: phrasing*.
// Children: empty.
// Attributes: globals; alt; coords; shape; href; target; download; ping; rel; referrerpolicy
func Area(areaAttrs ...AreaAttribute) doc.IContent {
	return elems.Area(toIAttributes(areaAttrs)...)
}

// Article
// Description: Self-contained syndicatable or reusable composition.
// Parents: flow.
// Children: flow.
// Attributes: globals
func Article(articleAttrs ...ArticleAttribute) doc.ContContainerFunc {
	return elems.Article(toIAttributes(articleAttrs)...)
}

// Aside
// Description: Sidebar for tangentially related content.
// Parents: flow.
// Children: flow.
// Attributes: globals
func Aside(asideAttrs ...AsideAttribute) doc.ContContainerFunc {
	return elems.Aside(toIAttributes(asideAttrs)...)
}

// Audio
// Description: Audio player.
// Parents: phrasing.
// Children: source*; track*; transparent*.
// Attributes: globals; src; crossorigin; preload; autoplay; loop; muted; controls
func Audio(audioAttrs ...AudioAttribute) doc.ContContainerFunc {
	return elems.Audio(toIAttributes(audioAttrs)...)
}

// B
// Description: Keywords.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func B(bAttrs ...BAttribute) doc.ContContainerFunc {
	return elems.B(toIAttributes(bAttrs)...)
}

// Base
// Description: Base URL and default target navigable for hyperlinks and forms.
// Parents: head.
// Children: empty.
// Attributes: globals; href; target
func Base(baseAttrs ...BaseAttribute) doc.IContent {
	return elems.Base(toIAttributes(baseAttrs)...)
}

// Bdi
// Description: Text directionality isolation.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Bdi(bdiAttrs ...BdiAttribute) doc.ContContainerFunc {
	return elems.Bdi(toIAttributes(bdiAttrs)...)
}

// Bdo
// Description: Text directionality formatting.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Bdo(bdoAttrs ...BdoAttribute) doc.ContContainerFunc {
	return elems.Bdo(toIAttributes(bdoAttrs)...)
}

// Blockquote
// Description: A section quoted from another source.
// Parents: flow.
// Children: flow.
// Attributes: globals; cite
func Blockquote(blockquoteAttrs ...BlockquoteAttribute) doc.ContContainerFunc {
	return elems.Blockquote(toIAttributes(blockquoteAttrs)...)
}

// Body
// Description: Document body.
// Parents: html.
// Children: flow.
// Attributes: globals; onafterprint; onbeforeprint; onbeforeunload; onhashchange; onlanguagechange; onmessage; onmessageerror; onoffline; ononline; onpageswap; onpagehide; onpagereveal; onpageshow; onpopstate; onrejectionhandled; onstorage; onunhandledrejection; onunload
func Body(bodyAttrs ...BodyAttribute) doc.ContContainerFunc {
	return elems.Body(toIAttributes(bodyAttrs)...)
}

// Br
// Description: Line break, e.g. in poem or postal address.
// Parents: phrasing.
// Children: empty.
// Attributes: globals
func Br(brAttrs ...BrAttribute) doc.IContent {
	return elems.Br(toIAttributes(brAttrs)...)
}

// Button
// Description: Button control.
// Parents: phrasing.
// Children: phrasing*.
// Attributes: globals; command; commandfor; disabled; form; formaction; formenctype; formmethod; formnovalidate; formtarget; name; popovertarget; popovertargetaction; type; value
func Button(buttonAttrs ...ButtonAttribute) doc.ContContainerFunc {
	return elems.Button(toIAttributes(buttonAttrs)...)
}

// Canvas
// Description: Scriptable bitmap canvas.
// Parents: phrasing.
// Children: transparent.
// Attributes: globals; width; height
func Canvas(canvasAttrs ...CanvasAttribute) doc.ContContainerFunc {
	return elems.Canvas(toIAttributes(canvasAttrs)...)
}

// Caption
// Description: Table caption.
// Parents: table.
// Children: flow*.
// Attributes: globals
func Caption(captionAttrs ...CaptionAttribute) doc.ContContainerFunc {
	return elems.Caption(toIAttributes(captionAttrs)...)
}

// Cite
// Description: Title of a work.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Cite(citeAttrs ...CiteAttribute) doc.ContContainerFunc {
	return elems.Cite(toIAttributes(citeAttrs)...)
}

// Code
// Description: Computer code.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Code(codeAttrs ...CodeAttribute) doc.ContContainerFunc {
	return elems.Code(toIAttributes(codeAttrs)...)
}

// Col
// Description: Table column.
// Parents: colgroup.
// Children: empty.
// Attributes: globals; span
func Col(colAttrs ...ColAttribute) doc.IContent {
	return elems.Col(toIAttributes(colAttrs)...)
}

// Colgroup
// Description: Group of columns in a table.
// Parents: table.
// Children: col*; template*.
// Attributes: globals; span
func Colgroup(colgroupAttrs ...ColgroupAttribute) doc.ContContainerFunc {
	return elems.Colgroup(toIAttributes(colgroupAttrs)...)
}

// Data
// Description: Machine-readable equivalent.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals; value
func Data(dataAttrs ...DataAttribute) doc.ContContainerFunc {
	return elems.Data(toIAttributes(dataAttrs)...)
}

// Datalist
// Description: Container for options for combo box control.
// Parents: phrasing.
// Children: phrasing*; option*; script-supporting elements*.
// Attributes: globals
func Datalist(datalistAttrs ...DatalistAttribute) doc.ContContainerFunc {
	return elems.Datalist(toIAttributes(datalistAttrs)...)
}

// Dd
// Description: Content for corresponding dt element(s).
// Parents: dl; div*.
// Children: flow.
// Attributes: globals
func Dd(ddAttrs ...DdAttribute) doc.ContContainerFunc {
	return elems.Dd(toIAttributes(ddAttrs)...)
}

// Del
// Description: A removal from the document.
// Parents: phrasing.
// Children: transparent.
// Attributes: globals; cite; datetime
func Del(delAttrs ...DelAttribute) doc.ContContainerFunc {
	return elems.Del(toIAttributes(delAttrs)...)
}

// Details
// Description: Disclosure control for hiding details.
// Parents: flow.
// Children: summary*; flow.
// Attributes: globals; name; open
func Details(detailsAttrs ...DetailsAttribute) doc.ContContainerFunc {
	return elems.Details(toIAttributes(detailsAttrs)...)
}

// Dfn
// Description: Defining instance.
// Parents: phrasing.
// Children: phrasing*.
// Attributes: globals
func Dfn(dfnAttrs ...DfnAttribute) doc.ContContainerFunc {
	return elems.Dfn(toIAttributes(dfnAttrs)...)
}

// Dialog
// Description: Dialog box or window.
// Parents: flow.
// Children: flow.
// Attributes: globals; open
func Dialog(dialogAttrs ...DialogAttribute) doc.ContContainerFunc {
	return elems.Dialog(toIAttributes(dialogAttrs)...)
}

// Div
// Description: Generic flow container, or container for name-value groups in dl elements.
// Parents: flow; dl; select element inner content elements; optgroup element inner content elements; option element inner content elements.
// Children: flow select element inner content elements*; optgroup element inner content elements*; option element inner content elements*.
// Attributes: globals
func Div(divAttrs ...DivAttribute) doc.ContContainerFunc {
	return elems.Div(toIAttributes(divAttrs)...)
}

// Dl
// Description: Association list consisting of zero or more name-value groups.
// Parents: flow.
// Children: dt*; dd*; div*; script-supporting elements.
// Attributes: globals
func Dl(dlAttrs ...DlAttribute) doc.ContContainerFunc {
	return elems.Dl(toIAttributes(dlAttrs)...)
}

// Dt
// Description: Legend for corresponding dd element(s).
// Parents: dl; div*.
// Children: flow*.
// Attributes: globals
func Dt(dtAttrs ...DtAttribute) doc.ContContainerFunc {
	return elems.Dt(toIAttributes(dtAttrs)...)
}

// Em
// Description: Stress emphasis.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Em(emAttrs ...EmAttribute) doc.ContContainerFunc {
	return elems.Em(toIAttributes(emAttrs)...)
}

// Embed
// Description: Plugin.
// Parents: phrasing.
// Children: empty.
// Attributes: globals; src; type; width; height; any*
func Embed(embedAttrs ...EmbedAttribute) doc.IContent {
	return elems.Embed(toIAttributes(embedAttrs)...)
}

// Fieldset
// Description: Group of form controls.
// Parents: flow.
// Children: legend*; flow.
// Attributes: globals; disabled; form; name
func Fieldset(fieldsetAttrs ...FieldsetAttribute) doc.ContContainerFunc {
	return elems.Fieldset(toIAttributes(fieldsetAttrs)...)
}

// Figcaption
// Description: Caption for figure.
// Parents: figure.
// Children: flow.
// Attributes: globals
func Figcaption(figcaptionAttrs ...FigcaptionAttribute) doc.ContContainerFunc {
	return elems.Figcaption(toIAttributes(figcaptionAttrs)...)
}

// Figure
// Description: Figure with optional caption.
// Parents: flow.
// Children: figcaption*; flow.
// Attributes: globals
func Figure(figureAttrs ...FigureAttribute) doc.ContContainerFunc {
	return elems.Figure(toIAttributes(figureAttrs)...)
}

// Footer
// Description: Footer for a page or section.
// Parents: flow.
// Children: flow*.
// Attributes: globals
func Footer(footerAttrs ...FooterAttribute) doc.ContContainerFunc {
	return elems.Footer(toIAttributes(footerAttrs)...)
}

// Form
// Description: User-submittable form.
// Parents: flow.
// Children: flow*.
// Attributes: globals; accept-charset; action; autocomplete; enctype; method; name; novalidate; rel; target
func Form(formAttrs ...FormAttribute) doc.ContContainerFunc {
	return elems.Form(toIAttributes(formAttrs)...)
}

// H1
// Description: Heading.
// Parents: legend; summary; flow.
// Children: phrasing.
// Attributes: globals
func H1(h1Attrs ...H1Attribute) doc.ContContainerFunc {
	return elems.H1(toIAttributes(h1Attrs)...)
}

// H2
// Description: Heading.
// Parents: legend; summary; flow.
// Children: phrasing.
// Attributes: globals
func H2(h2Attrs ...H2Attribute) doc.ContContainerFunc {
	return elems.H2(toIAttributes(h2Attrs)...)
}

// H3
// Description: Heading.
// Parents: legend; summary; flow.
// Children: phrasing.
// Attributes: globals
func H3(h3Attrs ...H3Attribute) doc.ContContainerFunc {
	return elems.H3(toIAttributes(h3Attrs)...)
}

// H4
// Description: Heading.
// Parents: legend; summary; flow.
// Children: phrasing.
// Attributes: globals
func H4(h4Attrs ...H4Attribute) doc.ContContainerFunc {
	return elems.H4(toIAttributes(h4Attrs)...)
}

// H5
// Description: Heading.
// Parents: legend; summary; flow.
// Children: phrasing.
// Attributes: globals
func H5(h5Attrs ...H5Attribute) doc.ContContainerFunc {
	return elems.H5(toIAttributes(h5Attrs)...)
}

// H6
// Description: Heading.
// Parents: legend; summary; flow.
// Children: phrasing.
// Attributes: globals
func H6(h6Attrs ...H6Attribute) doc.ContContainerFunc {
	return elems.H6(toIAttributes(h6Attrs)...)
}

// Head
// Description: Container for document metadata.
// Parents: html.
// Children: metadata content*.
// Attributes: globals
func Head(headAttrs ...HeadAttribute) doc.ContContainerFunc {
	return elems.Head(toIAttributes(headAttrs)...)
}

// Header
// Description: Introductory or navigational aids for a page or section.
// Parents: flow.
// Children: flow*.
// Attributes: globals
func Header(headerAttrs ...HeaderAttribute) doc.ContContainerFunc {
	return elems.Header(toIAttributes(headerAttrs)...)
}

// Hgroup
// Description: Heading container.
// Parents: legend; summary; flow.
// Children: h1; h2; h3; h4; h5; h6; p; script-supporting elements.
// Attributes: globals
func Hgroup(hgroupAttrs ...HgroupAttribute) doc.ContContainerFunc {
	return elems.Hgroup(toIAttributes(hgroupAttrs)...)
}

// Hr
// Description: Thematic break.
// Parents: flow; select element inner content elements.
// Children: empty.
// Attributes: globals
func Hr(hrAttrs ...HrAttribute) doc.IContent {
	return elems.Hr(toIAttributes(hrAttrs)...)
}

// Html
// Description: Root element.
// Parents: none*.
// Children: head*; body*.
// Attributes: globals
func Html(htmlAttrs ...HtmlAttribute) doc.ContContainerFunc {
	return elems.Html(toIAttributes(htmlAttrs)...)
}

// I
// Description: Alternate voice.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func I(iAttrs ...IAttribute) doc.ContContainerFunc {
	return elems.I(toIAttributes(iAttrs)...)
}

// Iframe
// Description: Child navigable.
// Parents: phrasing.
// Children: empty.
// Attributes: globals; src; srcdoc; name; sandbox; allow; allowfullscreen; width; height; referrerpolicy; loading
func Iframe(iframeAttrs ...IframeAttribute) doc.IContent {
	return elems.Iframe(toIAttributes(iframeAttrs)...)
}

// Img
// Description: Image.
// Parents: phrasing; picture.
// Children: empty.
// Attributes: globals; alt; src; srcset; sizes; crossorigin; usemap; ismap; width; height; referrerpolicy; decoding; loading; fetchpriority
func Img(imgAttrs ...ImgAttribute) doc.IContent {
	return elems.Img(toIAttributes(imgAttrs)...)
}

// Input
// Description: Form control.
// Parents: phrasing.
// Children: empty.
// Attributes: globals; accept; alpha; alt; autocomplete; checked; colorspace; dirname; disabled; form; formaction; formenctype; formmethod; formnovalidate; formtarget; height; list; max; maxlength; min; minlength; multiple; name; pattern; placeholder; popovertarget; popovertargetaction; readonly; required; size; src; step; type; value; width
func Input(inputAttrs ...InputAttribute) doc.IContent {
	return elems.Input(toIAttributes(inputAttrs)...)
}

// Ins
// Description: An addition to the document.
// Parents: phrasing.
// Children: transparent.
// Attributes: globals; cite; datetime
func Ins(insAttrs ...InsAttribute) doc.ContContainerFunc {
	return elems.Ins(toIAttributes(insAttrs)...)
}

// Kbd
// Description: User input.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Kbd(kbdAttrs ...KbdAttribute) doc.ContContainerFunc {
	return elems.Kbd(toIAttributes(kbdAttrs)...)
}

// Label
// Description: Caption for a form control.
// Parents: phrasing.
// Children: phrasing*.
// Attributes: globals; for
func Label(labelAttrs ...LabelAttribute) doc.ContContainerFunc {
	return elems.Label(toIAttributes(labelAttrs)...)
}

// Legend
// Description: Caption for fieldset.
// Parents: fieldset; optgroup.
// Children: phrasing*; heading content.
// Attributes: globals
func Legend(legendAttrs ...LegendAttribute) doc.ContContainerFunc {
	return elems.Legend(toIAttributes(legendAttrs)...)
}

// Link
// Description: Link metadata.
// Parents: head; noscript*; phrasing*.
// Children: empty.
// Attributes: globals; href; crossorigin; rel; as; media; hreflang; type; sizes; imagesrcset; imagesizes; referrerpolicy; integrity; blocking; color; disabled; fetchpriority
func Link(linkAttrs ...LinkAttribute) doc.IContent {
	return elems.Link(toIAttributes(linkAttrs)...)
}

// Main
// Description: Container for the dominant contents of the document.
// Parents: flow*.
// Children: flow.
// Attributes: globals
func Main(mainAttrs ...MainAttribute) doc.ContContainerFunc {
	return elems.Main(toIAttributes(mainAttrs)...)
}

// Map
// Description: Image map.
// Parents: phrasing.
// Children: transparent; area*.
// Attributes: globals; name
func Map(mapAttrs ...MapAttribute) doc.ContContainerFunc {
	return elems.Map(toIAttributes(mapAttrs)...)
}

// Mark
// Description: Highlight.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Mark(markAttrs ...MarkAttribute) doc.ContContainerFunc {
	return elems.Mark(toIAttributes(markAttrs)...)
}

// Math
// Description: MathML root.
// Parents: phrasing.
// Children: per [MATHML].
// Attributes: per [MATHML]
func Math(mathAttrs ...MathAttribute) doc.ContContainerFunc {
	return elems.Math(toIAttributes(mathAttrs)...)
}

// Menu
// Description: Menu of commands.
// Parents: flow.
// Children: li; script-supporting elements.
// Attributes: globals
func Menu(menuAttrs ...MenuAttribute) doc.ContContainerFunc {
	return elems.Menu(toIAttributes(menuAttrs)...)
}

// Meta
// Description: Text metadata.
// Parents: head; noscript*; phrasing*.
// Children: empty.
// Attributes: globals; name; http-equiv; content; charset; media
func Meta(metaAttrs ...MetaAttribute) doc.IContent {
	return elems.Meta(toIAttributes(metaAttrs)...)
}

// Meter
// Description: Gauge.
// Parents: phrasing.
// Children: phrasing*.
// Attributes: globals; value; min; max; low; high; optimum
func Meter(meterAttrs ...MeterAttribute) doc.ContContainerFunc {
	return elems.Meter(toIAttributes(meterAttrs)...)
}

// Nav
// Description: Section with navigational links.
// Parents: flow.
// Children: flow.
// Attributes: globals
func Nav(navAttrs ...NavAttribute) doc.ContContainerFunc {
	return elems.Nav(toIAttributes(navAttrs)...)
}

// Noscript
// Description: Fallback content for script.
// Parents: head*; phrasing*.
// Children: varies*.
// Attributes: globals
func Noscript(noscriptAttrs ...NoscriptAttribute) doc.ContContainerFunc {
	return elems.Noscript(toIAttributes(noscriptAttrs)...)
}

// Object
// Description: Image, child navigable, or plugin.
// Parents: phrasing.
// Children: transparent.
// Attributes: globals; data; type; name; form; width; height
func Object(objectAttrs ...ObjectAttribute) doc.ContContainerFunc {
	return elems.Object(toIAttributes(objectAttrs)...)
}

// Ol
// Description: Ordered list.
// Parents: flow.
// Children: li; script-supporting elements.
// Attributes: globals; reversed; start; type
func Ol(olAttrs ...OlAttribute) doc.ContContainerFunc {
	return elems.Ol(toIAttributes(olAttrs)...)
}

// Optgroup
// Description: Group of options in a list box.
// Parents: select; div*.
// Children: optgroup element inner content elements; legend*.
// Attributes: globals; disabled; label
func Optgroup(optgroupAttrs ...OptgroupAttribute) doc.ContContainerFunc {
	return elems.Optgroup(toIAttributes(optgroupAttrs)...)
}

// Option
// Description: Option in a list box or combo box control.
// Parents: select; datalist; optgroup; div*.
// Children: text*; option element inner content elements*.
// Attributes: globals; disabled; label; selected; value
func Option(optionAttrs ...OptionAttribute) doc.ContContainerFunc {
	return elems.Option(toIAttributes(optionAttrs)...)
}

// Output
// Description: Calculated output value.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals; for; form; name
func Output(outputAttrs ...OutputAttribute) doc.ContContainerFunc {
	return elems.Output(toIAttributes(outputAttrs)...)
}

// P
// Description: Paragraph.
// Parents: flow.
// Children: phrasing.
// Attributes: globals
func P(pAttrs ...PAttribute) doc.ContContainerFunc {
	return elems.P(toIAttributes(pAttrs)...)
}

// Picture
// Description: Image.
// Parents: phrasing.
// Children: source*; one img; script-supporting elements.
// Attributes: globals
func Picture(pictureAttrs ...PictureAttribute) doc.ContContainerFunc {
	return elems.Picture(toIAttributes(pictureAttrs)...)
}

// Pre
// Description: Block of preformatted text.
// Parents: flow.
// Children: phrasing.
// Attributes: globals
func Pre(preAttrs ...PreAttribute) doc.ContContainerFunc {
	return elems.Pre(toIAttributes(preAttrs)...)
}

// Progress
// Description: Progress bar.
// Parents: phrasing.
// Children: phrasing*.
// Attributes: globals; value; max
func Progress(progressAttrs ...ProgressAttribute) doc.ContContainerFunc {
	return elems.Progress(toIAttributes(progressAttrs)...)
}

// Q
// Description: Quotation.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals; cite
func Q(qAttrs ...QAttribute) doc.ContContainerFunc {
	return elems.Q(toIAttributes(qAttrs)...)
}

// Rp
// Description: Parenthesis for ruby annotation text.
// Parents: ruby.
// Children: text.
// Attributes: globals
func Rp(rpAttrs ...RpAttribute) doc.ContContainerFunc {
	return elems.Rp(toIAttributes(rpAttrs)...)
}

// Rt
// Description: Ruby annotation text.
// Parents: ruby.
// Children: phrasing.
// Attributes: globals
func Rt(rtAttrs ...RtAttribute) doc.ContContainerFunc {
	return elems.Rt(toIAttributes(rtAttrs)...)
}

// Ruby
// Description: Ruby annotation(s).
// Parents: phrasing.
// Children: phrasing; rt; rp*.
// Attributes: globals
func Ruby(rubyAttrs ...RubyAttribute) doc.ContContainerFunc {
	return elems.Ruby(toIAttributes(rubyAttrs)...)
}

// S
// Description: Inaccurate text.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func S(sAttrs ...SAttribute) doc.ContContainerFunc {
	return elems.S(toIAttributes(sAttrs)...)
}

// Samp
// Description: Computer output.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Samp(sampAttrs ...SampAttribute) doc.ContContainerFunc {
	return elems.Samp(toIAttributes(sampAttrs)...)
}

// Search
// Description: Container for search controls.
// Parents: flow.
// Children: flow.
// Attributes: globals
func Search(searchAttrs ...SearchAttribute) doc.ContContainerFunc {
	return elems.Search(toIAttributes(searchAttrs)...)
}

// Section
// Description: Generic document or application section.
// Parents: flow.
// Children: flow.
// Attributes: globals
func Section(sectionAttrs ...SectionAttribute) doc.ContContainerFunc {
	return elems.Section(toIAttributes(sectionAttrs)...)
}

// Select
// Description: List box control.
// Parents: phrasing.
// Children: select element inner content elements; button*.
// Attributes: globals; autocomplete; disabled; form; multiple; name; required; size
func Select(selectAttrs ...SelectAttribute) doc.ContContainerFunc {
	return elems.Select(toIAttributes(selectAttrs)...)
}

// Selectedcontent
// Description: Mirrors content from an option.
// Parents: button.
// Children: empty.
// Attributes: globals
func Selectedcontent(selectedcontentAttrs ...SelectedcontentAttribute) doc.IContent {
	return elems.Selectedcontent(toIAttributes(selectedcontentAttrs)...)
}

// Slot
// Description: Shadow tree slot.
// Parents: phrasing.
// Children: transparent.
// Attributes: globals; name
func Slot(slotAttrs ...SlotAttribute) doc.ContContainerFunc {
	return elems.Slot(toIAttributes(slotAttrs)...)
}

// Small
// Description: Side comment.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Small(smallAttrs ...SmallAttribute) doc.ContContainerFunc {
	return elems.Small(toIAttributes(smallAttrs)...)
}

// Source
// Description: Image source for img or media source for video or audio.
// Parents: picture; video; audio.
// Children: empty.
// Attributes: globals; type; media; src; srcset; sizes; width; height
func Source(sourceAttrs ...SourceAttribute) doc.IContent {
	return elems.Source(toIAttributes(sourceAttrs)...)
}

// Span
// Description: Generic phrasing container.
// Parents: phrasing; option element inner content elements*.
// Children: phrasing.
// Attributes: globals
func Span(spanAttrs ...SpanAttribute) doc.ContContainerFunc {
	return elems.Span(toIAttributes(spanAttrs)...)
}

// Strong
// Description: Importance.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Strong(strongAttrs ...StrongAttribute) doc.ContContainerFunc {
	return elems.Strong(toIAttributes(strongAttrs)...)
}

// Style
// Description: Embedded styling information.
// Parents: head; noscript*.
// Children: text*.
// Attributes: globals; media; blocking
func Style(styleAttrs ...StyleAttribute) doc.ContContainerFunc {
	return elems.Style(toIAttributes(styleAttrs)...)
}

// Sub
// Description: Subscript.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Sub(subAttrs ...SubAttribute) doc.ContContainerFunc {
	return elems.Sub(toIAttributes(subAttrs)...)
}

// Summary
// Description: Caption for details.
// Parents: details.
// Children: phrasing; heading content.
// Attributes: globals
func Summary(summaryAttrs ...SummaryAttribute) doc.ContContainerFunc {
	return elems.Summary(toIAttributes(summaryAttrs)...)
}

// Sup
// Description: Superscript.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Sup(supAttrs ...SupAttribute) doc.ContContainerFunc {
	return elems.Sup(toIAttributes(supAttrs)...)
}

// Svg
// Description: SVG root.
// Parents: phrasing.
// Children: per [SVG].
// Attributes: per [SVG]
func Svg(svgAttrs ...SvgAttribute) doc.ContContainerFunc {
	return elems.Svg(toIAttributes(svgAttrs)...)
}

// Table
// Description: Table.
// Parents: flow.
// Children: caption*; colgroup*; thead*; tbody*; tfoot*; tr*; script-supporting elements.
// Attributes: globals
func Table(tableAttrs ...TableAttribute) doc.ContContainerFunc {
	return elems.Table(toIAttributes(tableAttrs)...)
}

// Tbody
// Description: Group of rows in a table.
// Parents: table.
// Children: tr; script-supporting elements.
// Attributes: globals
func Tbody(tbodyAttrs ...TbodyAttribute) doc.ContContainerFunc {
	return elems.Tbody(toIAttributes(tbodyAttrs)...)
}

// Td
// Description: Table cell.
// Parents: tr.
// Children: flow.
// Attributes: globals; colspan; rowspan; headers
func Td(tdAttrs ...TdAttribute) doc.ContContainerFunc {
	return elems.Td(toIAttributes(tdAttrs)...)
}

// Template
// Description: Template.
// Parents: metadata; phrasing; script-supporting; colgroup*.
// Children: empty.
// Attributes: globals; shadowrootmode; shadowrootdelegatesfocus; shadowrootclonable; shadowrootserializable; shadowrootcustomelementregistry
func Template(templateAttrs ...TemplateAttribute) doc.IContent {
	return elems.Template(toIAttributes(templateAttrs)...)
}

// Textarea
// Description: Multiline text controls.
// Parents: phrasing.
// Children: text.
// Attributes: globals; autocomplete; cols; dirname; disabled; form; maxlength; minlength; name; placeholder; readonly; required; rows; wrap
func Textarea(textareaAttrs ...TextareaAttribute) doc.ContContainerFunc {
	return elems.Textarea(toIAttributes(textareaAttrs)...)
}

// Tfoot
// Description: Group of footer rows in a table.
// Parents: table.
// Children: tr; script-supporting elements.
// Attributes: globals
func Tfoot(tfootAttrs ...TfootAttribute) doc.ContContainerFunc {
	return elems.Tfoot(toIAttributes(tfootAttrs)...)
}

// Th
// Description: Table header cell.
// Parents: tr.
// Children: flow*.
// Attributes: globals; colspan; rowspan; headers; scope; abbr
func Th(thAttrs ...ThAttribute) doc.ContContainerFunc {
	return elems.Th(toIAttributes(thAttrs)...)
}

// Thead
// Description: Group of heading rows in a table.
// Parents: table.
// Children: tr; script-supporting elements.
// Attributes: globals
func Thead(theadAttrs ...TheadAttribute) doc.ContContainerFunc {
	return elems.Thead(toIAttributes(theadAttrs)...)
}

// Time
// Description: Machine-readable equivalent of date- or time-related data.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals; datetime
func Time(timeAttrs ...TimeAttribute) doc.ContContainerFunc {
	return elems.Time(toIAttributes(timeAttrs)...)
}

// Title
// Description: Document title.
// Parents: head.
// Children: text*.
// Attributes: globals
func Title(titleAttrs ...TitleAttribute) doc.ContContainerFunc {
	return elems.Title(toIAttributes(titleAttrs)...)
}

// Tr
// Description: Table row.
// Parents: table; thead; tbody; tfoot.
// Children: th*; td; script-supporting elements.
// Attributes: globals
func Tr(trAttrs ...TrAttribute) doc.ContContainerFunc {
	return elems.Tr(toIAttributes(trAttrs)...)
}

// Track
// Description: Timed text track.
// Parents: audio; video.
// Children: empty.
// Attributes: globals; default; kind; label; src; srclang
func Track(trackAttrs ...TrackAttribute) doc.IContent {
	return elems.Track(toIAttributes(trackAttrs)...)
}

// U
// Description: Unarticulated annotation.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func U(uAttrs ...UAttribute) doc.ContContainerFunc {
	return elems.U(toIAttributes(uAttrs)...)
}

// Var
// Description: Variable.
// Parents: phrasing.
// Children: phrasing.
// Attributes: globals
func Var(varAttrs ...VarAttribute) doc.ContContainerFunc {
	return elems.Var(toIAttributes(varAttrs)...)
}

// Video
// Description: Video player.
// Parents: phrasing.
// Children: source*; track*; transparent*.
// Attributes: globals; src; crossorigin; poster; preload; autoplay; playsinline; loop; muted; controls; width; height
func Video(videoAttrs ...VideoAttribute) doc.ContContainerFunc {
	return elems.Video(toIAttributes(videoAttrs)...)
}

// Wbr
// Description: Line breaking opportunity.
// Parents: phrasing.
// Children: empty.
// Attributes: globals
func Wbr(wbrAttrs ...WbrAttribute) doc.IContent {
	return elems.Wbr(toIAttributes(wbrAttrs)...)
}
